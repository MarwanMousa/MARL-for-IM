import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc


# Define plot settings
rc('font', **{'family': 'serif', 'serif': ['Palatino'], 'size': 13})
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42
plt.rcParams["figure.dpi"] = 200


#%% Load Single Rl Data
S1_results = np.load("checkpoints/single_agent/div_1/results.npy", allow_pickle=True)
S1_time = np.load("checkpoints/single_agent/div_1/time.npy", allow_pickle=True)
S1_reward_mean = np.load("checkpoints/single_agent/div_1/reward_mean.npy", allow_pickle=True)
S1_reward_std = np.load("checkpoints/single_agent/div_1/reward_std.npy", allow_pickle=True)
S1_inventory_mean = np.load("checkpoints/single_agent/div_1/inventory_mean.npy", allow_pickle=True)
S1_inventory_std = np.load("checkpoints/single_agent/div_1/inventory_std.npy", allow_pickle=True)
S1_backlog_mean = np.load("checkpoints/single_agent/div_1/backlog_mean.npy", allow_pickle=True)
S1_backlog_std = np.load("checkpoints/single_agent/div_1/backlog_std.npy", allow_pickle=True)
S1_customer_backlog_mean = np.load("checkpoints/single_agent/div_1/customer_backlog_mean.npy", allow_pickle=True)
S1_customer_backlog_std = np.load("checkpoints/single_agent/div_1/customer_backlog_std.npy", allow_pickle=True)
S1_profit = np.load("checkpoints/single_agent/div_1/profit.npy", allow_pickle=True)

S1N10_results = np.load("checkpoints/single_agent/div_1_noise_10/results.npy", allow_pickle=True)
S1N10_time = np.load("checkpoints/single_agent/div_1_noise_10/time.npy", allow_pickle=True)
S1N10_reward_mean = np.load("checkpoints/single_agent/div_1_noise_10/reward_mean.npy", allow_pickle=True)
S1N10_reward_std = np.load("checkpoints/single_agent/div_1_noise_10/reward_std.npy", allow_pickle=True)
S1N10_inventory_mean = np.load("checkpoints/single_agent/div_1_noise_10/inventory_mean.npy", allow_pickle=True)
S1N10_inventory_std = np.load("checkpoints/single_agent/div_1_noise_10/inventory_std.npy", allow_pickle=True)
S1N10_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_10/backlog_mean.npy", allow_pickle=True)
S1N10_backlog_std = np.load("checkpoints/single_agent/div_1_noise_10/backlog_std.npy", allow_pickle=True)
S1N10_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_10/customer_backlog_mean.npy", allow_pickle=True)
S1N10_customer_backlog_std = np.load("checkpoints/single_agent/div_1_noise_10/customer_backlog_std.npy", allow_pickle=True)
S1N10_profit = np.load("checkpoints/single_agent/div_1_noise_10/profit.npy", allow_pickle=True)

S1N20_results = np.load("checkpoints/single_agent/div_1_noise_20/results.npy", allow_pickle=True)
S1N20_time = np.load("checkpoints/single_agent/div_1_noise_20/time.npy", allow_pickle=True)
S1N20_reward_mean = np.load("checkpoints/single_agent/div_1_noise_20/reward_mean.npy", allow_pickle=True)
S1N20_reward_std = np.load("checkpoints/single_agent/div_1_noise_20/reward_std.npy", allow_pickle=True)
S1N20_inventory_mean = np.load("checkpoints/single_agent/div_1_noise_20/inventory_mean.npy", allow_pickle=True)
S1N20_inventory_std = np.load("checkpoints/single_agent/div_1_noise_20/inventory_std.npy", allow_pickle=True)
S1N20_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_20/backlog_mean.npy", allow_pickle=True)
S1N20_backlog_std = np.load("checkpoints/single_agent/div_1_noise_20/backlog_std.npy", allow_pickle=True)
S1N20_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_20/customer_backlog_mean.npy", allow_pickle=True)
S1N20_customer_backlog_std = np.load("checkpoints/single_agent/div_1_noise_20/customer_backlog_std.npy", allow_pickle=True)
S1N20_profit = np.load("checkpoints/single_agent/div_1_noise_20/profit.npy", allow_pickle=True)

S1N30_results = np.load("checkpoints/single_agent/div_1_noise_30/results.npy", allow_pickle=True)
S1N30_time = np.load("checkpoints/single_agent/div_1_noise_30/time.npy", allow_pickle=True)
S1N30_reward_mean = np.load("checkpoints/single_agent/div_1_noise_30/reward_mean.npy", allow_pickle=True)
S1N30_reward_std = np.load("checkpoints/single_agent/div_1_noise_30/reward_std.npy", allow_pickle=True)
S1N30_inventory_mean = np.load("checkpoints/single_agent/div_1_noise_30/inventory_mean.npy", allow_pickle=True)
S1N30_inventory_std = np.load("checkpoints/single_agent/div_1_noise_30/inventory_std.npy", allow_pickle=True)
S1N30_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_30/backlog_mean.npy", allow_pickle=True)
S1N30_backlog_std = np.load("checkpoints/single_agent/div_1_noise_30/backlog_std.npy", allow_pickle=True)
S1N30_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_30/customer_backlog_mean.npy", allow_pickle=True)
S1N30_customer_backlog_std = np.load("checkpoints/single_agent/div_1_noise_30/customer_backlog_std.npy", allow_pickle=True)
S1N30_profit = np.load("checkpoints/single_agent/div_1_noise_30/profit.npy", allow_pickle=True)

S1N40_results = np.load("checkpoints/single_agent/div_1_noise_40/results.npy", allow_pickle=True)
S1N40_time = np.load("checkpoints/single_agent/div_1_noise_40/time.npy", allow_pickle=True)
S1N40_reward_mean = np.load("checkpoints/single_agent/div_1_noise_40/reward_mean.npy", allow_pickle=True)
S1N40_reward_std = np.load("checkpoints/single_agent/div_1_noise_40/reward_std.npy", allow_pickle=True)
S1N40_inventory_mean = np.load("checkpoints/single_agent/div_1_noise_40/inventory_mean.npy", allow_pickle=True)
S1N40_inventory_std = np.load("checkpoints/single_agent/div_1_noise_40/inventory_std.npy", allow_pickle=True)
S1N40_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_40/backlog_mean.npy", allow_pickle=True)
S1N40_backlog_std = np.load("checkpoints/single_agent/div_1_noise_40/backlog_std.npy", allow_pickle=True)
S1N40_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_40/customer_backlog_mean.npy", allow_pickle=True)
S1N40_customer_backlog_std = np.load("checkpoints/single_agent/div_1_noise_40/customer_backlog_std.npy", allow_pickle=True)
S1N40_profit = np.load("checkpoints/single_agent/div_1_noise_40/profit.npy", allow_pickle=True)

S1N50_results = np.load("checkpoints/single_agent/div_1_noise_50/results.npy", allow_pickle=True)
S1N50_time = np.load("checkpoints/single_agent/div_1_noise_50/time.npy", allow_pickle=True)
S1N50_reward_mean = np.load("checkpoints/single_agent/div_1_noise_50/reward_mean.npy", allow_pickle=True)
S1N50_reward_std = np.load("checkpoints/single_agent/div_1_noise_50/reward_std.npy", allow_pickle=True)
S1N50_inventory_mean = np.load("checkpoints/single_agent/div_1_noise_50/inventory_mean.npy", allow_pickle=True)
S1N50_inventory_std = np.load("checkpoints/single_agent/div_1_noise_50/inventory_std.npy", allow_pickle=True)
S1N50_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_50/backlog_mean.npy", allow_pickle=True)
S1N50_backlog_std = np.load("checkpoints/single_agent/div_1_noise_50/backlog_std.npy", allow_pickle=True)
S1N50_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_noise_50/customer_backlog_mean.npy", allow_pickle=True)
S1N50_customer_backlog_std = np.load("checkpoints/single_agent/div_1_noise_50/customer_backlog_std.npy", allow_pickle=True)
S1N50_profit = np.load("checkpoints/single_agent/div_1_noise_50/profit.npy", allow_pickle=True)

S1D10_results = np.load("checkpoints/single_agent/div_1_delay_10/results.npy", allow_pickle=True)
S1D10_time = np.load("checkpoints/single_agent/div_1_delay_10/time.npy", allow_pickle=True)
S1D10_reward_mean = np.load("checkpoints/single_agent/div_1_delay_10/reward_mean.npy", allow_pickle=True)
S1D10_reward_std = np.load("checkpoints/single_agent/div_1_delay_10/reward_std.npy", allow_pickle=True)
S1D10_inventory_mean = np.load("checkpoints/single_agent/div_1_delay_10/inventory_mean.npy", allow_pickle=True)
S1D10_inventory_std = np.load("checkpoints/single_agent/div_1_delay_10/inventory_std.npy", allow_pickle=True)
S1D10_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_10/backlog_mean.npy", allow_pickle=True)
S1D10_backlog_std = np.load("checkpoints/single_agent/div_1_delay_10/backlog_std.npy", allow_pickle=True)
S1D10_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_10/customer_backlog_mean.npy", allow_pickle=True)
S1D10_customer_backlog_std = np.load("checkpoints/single_agent/div_1_delay_10/customer_backlog_std.npy", allow_pickle=True)
S1D10_profit = np.load("checkpoints/single_agent/div_1_delay_10/profit.npy", allow_pickle=True)

S1D20_results = np.load("checkpoints/single_agent/div_1_delay_20/results.npy", allow_pickle=True)
S1D20_time = np.load("checkpoints/single_agent/div_1_delay_20/time.npy", allow_pickle=True)
S1D20_reward_mean = np.load("checkpoints/single_agent/div_1_delay_20/reward_mean.npy", allow_pickle=True)
S1D20_reward_std = np.load("checkpoints/single_agent/div_1_delay_20/reward_std.npy", allow_pickle=True)
S1D20_inventory_mean = np.load("checkpoints/single_agent/div_1_delay_20/inventory_mean.npy", allow_pickle=True)
S1D20_inventory_std = np.load("checkpoints/single_agent/div_1_delay_20/inventory_std.npy", allow_pickle=True)
S1D20_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_20/backlog_mean.npy", allow_pickle=True)
S1D20_backlog_std = np.load("checkpoints/single_agent/div_1_delay_20/backlog_std.npy", allow_pickle=True)
S1D20_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_20/customer_backlog_mean.npy", allow_pickle=True)
S1D20_customer_backlog_std = np.load("checkpoints/single_agent/div_1_delay_20/customer_backlog_std.npy", allow_pickle=True)
S1D20_profit = np.load("checkpoints/single_agent/div_1_delay_20/profit.npy", allow_pickle=True)

S1D30_results = np.load("checkpoints/single_agent/div_1_delay_30/results.npy", allow_pickle=True)
S1D30_time = np.load("checkpoints/single_agent/div_1_delay_30/time.npy", allow_pickle=True)
S1D30_reward_mean = np.load("checkpoints/single_agent/div_1_delay_30/reward_mean.npy", allow_pickle=True)
S1D30_reward_std = np.load("checkpoints/single_agent/div_1_delay_30/reward_std.npy", allow_pickle=True)
S1D30_inventory_mean = np.load("checkpoints/single_agent/div_1_delay_30/inventory_mean.npy", allow_pickle=True)
S1D30_inventory_std = np.load("checkpoints/single_agent/div_1_delay_30/inventory_std.npy", allow_pickle=True)
S1D30_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_30/backlog_mean.npy", allow_pickle=True)
S1D30_backlog_std = np.load("checkpoints/single_agent/div_1_delay_30/backlog_std.npy", allow_pickle=True)
S1D30_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_30/customer_backlog_mean.npy", allow_pickle=True)
S1D30_customer_backlog_std = np.load("checkpoints/single_agent/div_1_delay_30/customer_backlog_std.npy", allow_pickle=True)
S1D30_profit = np.load("checkpoints/single_agent/div_1_delay_30/profit.npy", allow_pickle=True)

S1D40_results = np.load("checkpoints/single_agent/div_1_delay_40/results.npy", allow_pickle=True)
S1D40_time = np.load("checkpoints/single_agent/div_1_delay_40/time.npy", allow_pickle=True)
S1D40_reward_mean = np.load("checkpoints/single_agent/div_1_delay_40/reward_mean.npy", allow_pickle=True)
S1D40_reward_std = np.load("checkpoints/single_agent/div_1_delay_40/reward_std.npy", allow_pickle=True)
S1D40_inventory_mean = np.load("checkpoints/single_agent/div_1_delay_40/inventory_mean.npy", allow_pickle=True)
S1D40_inventory_std = np.load("checkpoints/single_agent/div_1_delay_40/inventory_std.npy", allow_pickle=True)
S1D40_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_40/backlog_mean.npy", allow_pickle=True)
S1D40_backlog_std = np.load("checkpoints/single_agent/div_1_delay_40/backlog_std.npy", allow_pickle=True)
S1D40_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_40/customer_backlog_mean.npy", allow_pickle=True)
S1D40_customer_backlog_std = np.load("checkpoints/single_agent/div_1_delay_40/customer_backlog_std.npy", allow_pickle=True)
S1D40_profit = np.load("checkpoints/single_agent/div_1_delay_40/profit.npy", allow_pickle=True)

S1D50_results = np.load("checkpoints/single_agent/div_1_delay_50/results.npy", allow_pickle=True)
S1D50_time = np.load("checkpoints/single_agent/div_1_delay_50/time.npy", allow_pickle=True)
S1D50_reward_mean = np.load("checkpoints/single_agent/div_1_delay_50/reward_mean.npy", allow_pickle=True)
S1D50_reward_std = np.load("checkpoints/single_agent/div_1_delay_50/reward_std.npy", allow_pickle=True)
S1D50_inventory_mean = np.load("checkpoints/single_agent/div_1_delay_50/inventory_mean.npy", allow_pickle=True)
S1D50_inventory_std = np.load("checkpoints/single_agent/div_1_delay_50/inventory_std.npy", allow_pickle=True)
S1D50_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_50/backlog_mean.npy", allow_pickle=True)
S1D50_backlog_std = np.load("checkpoints/single_agent/div_1_delay_50/backlog_std.npy", allow_pickle=True)
S1D50_customer_backlog_mean = np.load("checkpoints/single_agent/div_1_delay_50/customer_backlog_mean.npy", allow_pickle=True)
S1D50_customer_backlog_std = np.load("checkpoints/single_agent/div_1_delay_50/customer_backlog_std.npy", allow_pickle=True)
S1D50_profit = np.load("checkpoints/single_agent/div_1_delay_50/profit.npy", allow_pickle=True)

#%% Load Noise trained Single RL Data
NS1N10_results = np.load("checkpoints/single_agent_noisy_demand/div1_10/results.npy", allow_pickle=True)
NS1N10_time = np.load("checkpoints/single_agent_noisy_demand/div1_10/time.npy", allow_pickle=True)
NS1N10_reward_mean = np.load("checkpoints/single_agent_noisy_demand/div1_10/reward_mean.npy", allow_pickle=True)
NS1N10_reward_std = np.load("checkpoints/single_agent_noisy_demand/div1_10/reward_std.npy", allow_pickle=True)
NS1N10_profit = np.load("checkpoints/single_agent_noisy_demand/div1_10/profit.npy", allow_pickle=True)

NS1N20_results = np.load("checkpoints/single_agent_noisy_demand/div1_20/results.npy", allow_pickle=True)
NS1N20_time = np.load("checkpoints/single_agent_noisy_demand/div1_20/time.npy", allow_pickle=True)
NS1N20_reward_mean = np.load("checkpoints/single_agent_noisy_demand/div1_20/reward_mean.npy", allow_pickle=True)
NS1N20_reward_std = np.load("checkpoints/single_agent_noisy_demand/div1_20/reward_std.npy", allow_pickle=True)
NS1N20_profit = np.load("checkpoints/single_agent_noisy_demand/div1_20/profit.npy", allow_pickle=True)

NS1N30_results = np.load("checkpoints/single_agent_noisy_demand/div1_30/results.npy", allow_pickle=True)
NS1N30_time = np.load("checkpoints/single_agent_noisy_demand/div1_30/time.npy", allow_pickle=True)
NS1N30_reward_mean = np.load("checkpoints/single_agent_noisy_demand/div1_30/reward_mean.npy", allow_pickle=True)
NS1N30_reward_std = np.load("checkpoints/single_agent_noisy_demand/div1_30/reward_std.npy", allow_pickle=True)
NS1N30_profit = np.load("checkpoints/single_agent_noisy_demand/div1_30/profit.npy", allow_pickle=True)

NS1N40_results = np.load("checkpoints/single_agent_noisy_demand/div1_40/results.npy", allow_pickle=True)
NS1N40_time = np.load("checkpoints/single_agent_noisy_demand/div1_40/time.npy", allow_pickle=True)
NS1N40_reward_mean = np.load("checkpoints/single_agent_noisy_demand/div1_40/reward_mean.npy", allow_pickle=True)
NS1N40_reward_std = np.load("checkpoints/single_agent_noisy_demand/div1_40/reward_std.npy", allow_pickle=True)
NS1N40_profit = np.load("checkpoints/single_agent_noisy_demand/div1_40/profit.npy", allow_pickle=True)

NS1N50_results = np.load("checkpoints/single_agent_noisy_demand/div1_50/results.npy", allow_pickle=True)
NS1N50_time = np.load("checkpoints/single_agent_noisy_demand/div1_50/time.npy", allow_pickle=True)
NS1N50_reward_mean = np.load("checkpoints/single_agent_noisy_demand/div1_50/reward_mean.npy", allow_pickle=True)
NS1N50_reward_std = np.load("checkpoints/single_agent_noisy_demand/div1_50/reward_std.npy", allow_pickle=True)
NS1N50_profit = np.load("checkpoints/single_agent_noisy_demand/div1_50/profit.npy", allow_pickle=True)

NS1D10_results = np.load("checkpoints/single_agent_noisy_delay/div1_10/results.npy", allow_pickle=True)
NS1D10_time = np.load("checkpoints/single_agent_noisy_delay/div1_10/time.npy", allow_pickle=True)
NS1D10_reward_mean = np.load("checkpoints/single_agent_noisy_delay/div1_10/reward_mean.npy", allow_pickle=True)
NS1D10_reward_std = np.load("checkpoints/single_agent_noisy_delay/div1_10/reward_std.npy", allow_pickle=True)
NS1D10_profit = np.load("checkpoints/single_agent_noisy_delay/div1_10/profit.npy", allow_pickle=True)

NS1D20_results = np.load("checkpoints/single_agent_noisy_delay/div1_20/results.npy", allow_pickle=True)
NS1D20_time = np.load("checkpoints/single_agent_noisy_delay/div1_20/time.npy", allow_pickle=True)
NS1D20_reward_mean = np.load("checkpoints/single_agent_noisy_delay/div1_20/reward_mean.npy", allow_pickle=True)
NS1D20_reward_std = np.load("checkpoints/single_agent_noisy_delay/div1_20/reward_std.npy", allow_pickle=True)
NS1D20_profit = np.load("checkpoints/single_agent_noisy_delay/div1_20/profit.npy", allow_pickle=True)

NS1D30_results = np.load("checkpoints/single_agent_noisy_delay/div1_30/results.npy", allow_pickle=True)
NS1D30_time = np.load("checkpoints/single_agent_noisy_delay/div1_30/time.npy", allow_pickle=True)
NS1D30_reward_mean = np.load("checkpoints/single_agent_noisy_delay/div1_30/reward_mean.npy", allow_pickle=True)
NS1D30_reward_std = np.load("checkpoints/single_agent_noisy_delay/div1_30/reward_std.npy", allow_pickle=True)
NS1D30_profit = np.load("checkpoints/single_agent_noisy_delay/div1_30/profit.npy", allow_pickle=True)

NS1D40_results = np.load("checkpoints/single_agent_noisy_delay/div1_40/results.npy", allow_pickle=True)
NS1D40_time = np.load("checkpoints/single_agent_noisy_delay/div1_40/time.npy", allow_pickle=True)
NS1D40_reward_mean = np.load("checkpoints/single_agent_noisy_delay/div1_40/reward_mean.npy", allow_pickle=True)
NS1D40_reward_std = np.load("checkpoints/single_agent_noisy_delay/div1_40/reward_std.npy", allow_pickle=True)
NS1D40_profit = np.load("checkpoints/single_agent_noisy_delay/div1_40/profit.npy", allow_pickle=True)

NS1D50_results = np.load("checkpoints/single_agent_noisy_delay/div1_50/results.npy", allow_pickle=True)
NS1D50_time = np.load("checkpoints/single_agent_noisy_delay/div1_50/time.npy", allow_pickle=True)
NS1D50_reward_mean = np.load("checkpoints/single_agent_noisy_delay/div1_50/reward_mean.npy", allow_pickle=True)
NS1D50_reward_std = np.load("checkpoints/single_agent_noisy_delay/div1_50/reward_std.npy", allow_pickle=True)
NS1D50_profit = np.load("checkpoints/single_agent_noisy_delay/div1_50/profit.npy", allow_pickle=True)
#%% Load MA Rl Data
MA1_results = np.load("checkpoints/multi_agent/div_1/results.npy", allow_pickle=True)
MA1_time = np.load("checkpoints/multi_agent/div_1/time.npy", allow_pickle=True)
MA1_reward_mean = np.load("checkpoints/multi_agent/div_1/reward_mean.npy", allow_pickle=True)
MA1_reward_std = np.load("checkpoints/multi_agent/div_1/reward_std.npy", allow_pickle=True)
MA1_inventory_mean = np.load("checkpoints/multi_agent/div_1/inventory_mean.npy", allow_pickle=True)
MA1_inventory_std = np.load("checkpoints/multi_agent/div_1/inventory_std.npy", allow_pickle=True)
MA1_backlog_mean = np.load("checkpoints/multi_agent/div_1/backlog_mean.npy", allow_pickle=True)
MA1_backlog_std = np.load("checkpoints/multi_agent/div_1/backlog_std.npy", allow_pickle=True)
MA1_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1/customer_backlog_mean.npy", allow_pickle=True)
MA1_customer_backlog_std = np.load("checkpoints/multi_agent/div_1/customer_backlog_std.npy", allow_pickle=True)
MA1_profit = np.load("checkpoints/multi_agent/div_1/profit.npy", allow_pickle=True)

MA1N10_time = np.load("checkpoints/multi_agent/div_1_noise_10/time.npy", allow_pickle=True)
MA1N10_reward_mean = np.load("checkpoints/multi_agent/div_1_noise_10/reward_mean.npy", allow_pickle=True)
MA1N10_reward_std = np.load("checkpoints/multi_agent/div_1_noise_10/reward_std.npy", allow_pickle=True)
MA1N10_inventory_mean = np.load("checkpoints/multi_agent/div_1_noise_10/inventory_mean.npy", allow_pickle=True)
MA1N10_inventory_std = np.load("checkpoints/multi_agent/div_1_noise_10/inventory_std.npy", allow_pickle=True)
MA1N10_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_10/backlog_mean.npy", allow_pickle=True)
MA1N10_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_10/backlog_std.npy", allow_pickle=True)
MA1N10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_10/customer_backlog_mean.npy", allow_pickle=True)
MA1N10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_10/customer_backlog_std.npy", allow_pickle=True)
MA1N10_profit = np.load("checkpoints/multi_agent/div_1_noise_10/profit.npy", allow_pickle=True)

MA1N20_time = np.load("checkpoints/multi_agent/div_1_noise_20/time.npy", allow_pickle=True)
MA1N20_reward_mean = np.load("checkpoints/multi_agent/div_1_noise_20/reward_mean.npy", allow_pickle=True)
MA1N20_reward_std = np.load("checkpoints/multi_agent/div_1_noise_20/reward_std.npy", allow_pickle=True)
MA1N20_inventory_mean = np.load("checkpoints/multi_agent/div_1_noise_20/inventory_mean.npy", allow_pickle=True)
MA1N20_inventory_std = np.load("checkpoints/multi_agent/div_1_noise_20/inventory_std.npy", allow_pickle=True)
MA1N20_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_20/backlog_mean.npy", allow_pickle=True)
MA1N20_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_20/backlog_std.npy", allow_pickle=True)
MA1N20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_20/customer_backlog_mean.npy", allow_pickle=True)
MA1N20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_20/customer_backlog_std.npy", allow_pickle=True)
MA1N20_profit = np.load("checkpoints/multi_agent/div_1_noise_20/profit.npy", allow_pickle=True)

MA1N30_time = np.load("checkpoints/multi_agent/div_1_noise_30/time.npy", allow_pickle=True)
MA1N30_reward_mean = np.load("checkpoints/multi_agent/div_1_noise_30/reward_mean.npy", allow_pickle=True)
MA1N30_reward_std = np.load("checkpoints/multi_agent/div_1_noise_30/reward_std.npy", allow_pickle=True)
MA1N30_inventory_mean = np.load("checkpoints/multi_agent/div_1_noise_30/inventory_mean.npy", allow_pickle=True)
MA1N30_inventory_std = np.load("checkpoints/multi_agent/div_1_noise_30/inventory_std.npy", allow_pickle=True)
MA1N30_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_30/backlog_mean.npy", allow_pickle=True)
MA1N30_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_30/backlog_std.npy", allow_pickle=True)
MA1N30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_30/customer_backlog_mean.npy", allow_pickle=True)
MA1N30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_30/customer_backlog_std.npy", allow_pickle=True)
MA1N30_profit = np.load("checkpoints/multi_agent/div_1_noise_30/profit.npy", allow_pickle=True)

MA1N40_time = np.load("checkpoints/multi_agent/div_1_noise_40/time.npy", allow_pickle=True)
MA1N40_reward_mean = np.load("checkpoints/multi_agent/div_1_noise_40/reward_mean.npy", allow_pickle=True)
MA1N40_reward_std = np.load("checkpoints/multi_agent/div_1_noise_40/reward_std.npy", allow_pickle=True)
MA1N40_inventory_mean = np.load("checkpoints/multi_agent/div_1_noise_40/inventory_mean.npy", allow_pickle=True)
MA1N40_inventory_std = np.load("checkpoints/multi_agent/div_1_noise_40/inventory_std.npy", allow_pickle=True)
MA1N40_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_40/backlog_mean.npy", allow_pickle=True)
MA1N40_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_40/backlog_std.npy", allow_pickle=True)
MA1N40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_40/customer_backlog_mean.npy", allow_pickle=True)
MA1N40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_40/customer_backlog_std.npy", allow_pickle=True)
MA1N40_profit = np.load("checkpoints/multi_agent/div_1_noise_40/profit.npy", allow_pickle=True)

MA1N50_time = np.load("checkpoints/multi_agent/div_1_noise_50/time.npy", allow_pickle=True)
MA1N50_reward_mean = np.load("checkpoints/multi_agent/div_1_noise_50/reward_mean.npy", allow_pickle=True)
MA1N50_reward_std = np.load("checkpoints/multi_agent/div_1_noise_50/reward_std.npy", allow_pickle=True)
MA1N50_inventory_mean = np.load("checkpoints/multi_agent/div_1_noise_50/inventory_mean.npy", allow_pickle=True)
MA1N50_inventory_std = np.load("checkpoints/multi_agent/div_1_noise_50/inventory_std.npy", allow_pickle=True)
MA1N50_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_50/backlog_mean.npy", allow_pickle=True)
MA1N50_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_50/backlog_std.npy", allow_pickle=True)
MA1N50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_noise_50/customer_backlog_mean.npy", allow_pickle=True)
MA1N50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_noise_50/customer_backlog_std.npy", allow_pickle=True)
MA1N50_profit = np.load("checkpoints/multi_agent/div_1_noise_50/profit.npy", allow_pickle=True)

MA1D10_time = np.load("checkpoints/multi_agent/div_1_delay_10/time.npy", allow_pickle=True)
MA1D10_reward_mean = np.load("checkpoints/multi_agent/div_1_delay_10/reward_mean.npy", allow_pickle=True)
MA1D10_reward_std = np.load("checkpoints/multi_agent/div_1_delay_10/reward_std.npy", allow_pickle=True)
MA1D10_inventory_mean = np.load("checkpoints/multi_agent/div_1_delay_10/inventory_mean.npy", allow_pickle=True)
MA1D10_inventory_std = np.load("checkpoints/multi_agent/div_1_delay_10/inventory_std.npy", allow_pickle=True)
MA1D10_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_10/backlog_mean.npy", allow_pickle=True)
MA1D10_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_10/backlog_std.npy", allow_pickle=True)
MA1D10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_10/customer_backlog_mean.npy", allow_pickle=True)
MA1D10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_10/customer_backlog_std.npy", allow_pickle=True)
MA1D10_profit = np.load("checkpoints/multi_agent/div_1_delay_10/profit.npy", allow_pickle=True)

MA1D20_time = np.load("checkpoints/multi_agent/div_1_delay_20/time.npy", allow_pickle=True)
MA1D20_reward_mean = np.load("checkpoints/multi_agent/div_1_delay_20/reward_mean.npy", allow_pickle=True)
MA1D20_reward_std = np.load("checkpoints/multi_agent/div_1_delay_20/reward_std.npy", allow_pickle=True)
MA1D20_inventory_mean = np.load("checkpoints/multi_agent/div_1_delay_20/inventory_mean.npy", allow_pickle=True)
MA1D20_inventory_std = np.load("checkpoints/multi_agent/div_1_delay_20/inventory_std.npy", allow_pickle=True)
MA1D20_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_20/backlog_mean.npy", allow_pickle=True)
MA1D20_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_20/backlog_std.npy", allow_pickle=True)
MA1D20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_20/customer_backlog_mean.npy", allow_pickle=True)
MA1D20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_20/customer_backlog_std.npy", allow_pickle=True)
MA1D20_profit = np.load("checkpoints/multi_agent/div_1_delay_20/profit.npy", allow_pickle=True)

MA1D30_time = np.load("checkpoints/multi_agent/div_1_delay_30/time.npy", allow_pickle=True)
MA1D30_reward_mean = np.load("checkpoints/multi_agent/div_1_delay_30/reward_mean.npy", allow_pickle=True)
MA1D30_reward_std = np.load("checkpoints/multi_agent/div_1_delay_30/reward_std.npy", allow_pickle=True)
MA1D30_inventory_mean = np.load("checkpoints/multi_agent/div_1_delay_30/inventory_mean.npy", allow_pickle=True)
MA1D30_inventory_std = np.load("checkpoints/multi_agent/div_1_delay_30/inventory_std.npy", allow_pickle=True)
MA1D30_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_30/backlog_mean.npy", allow_pickle=True)
MA1D30_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_30/backlog_std.npy", allow_pickle=True)
MA1D30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_30/customer_backlog_mean.npy", allow_pickle=True)
MA1D30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_30/customer_backlog_std.npy", allow_pickle=True)
MA1D30_profit = np.load("checkpoints/multi_agent/div_1_delay_30/profit.npy", allow_pickle=True)

MA1D40_time = np.load("checkpoints/multi_agent/div_1_delay_40/time.npy", allow_pickle=True)
MA1D40_reward_mean = np.load("checkpoints/multi_agent/div_1_delay_40/reward_mean.npy", allow_pickle=True)
MA1D40_reward_std = np.load("checkpoints/multi_agent/div_1_delay_40/reward_std.npy", allow_pickle=True)
MA1D40_inventory_mean = np.load("checkpoints/multi_agent/div_1_delay_40/inventory_mean.npy", allow_pickle=True)
MA1D40_inventory_std = np.load("checkpoints/multi_agent/div_1_delay_40/inventory_std.npy", allow_pickle=True)
MA1D40_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_40/backlog_mean.npy", allow_pickle=True)
MA1D40_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_40/backlog_std.npy", allow_pickle=True)
MA1D40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_40/customer_backlog_mean.npy", allow_pickle=True)
MA1D40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_40/customer_backlog_std.npy", allow_pickle=True)
MA1D40_profit = np.load("checkpoints/multi_agent/div_1_delay_40/profit.npy", allow_pickle=True)

MA1D50_time = np.load("checkpoints/multi_agent/div_1_delay_50/time.npy", allow_pickle=True)
MA1D50_reward_mean = np.load("checkpoints/multi_agent/div_1_delay_50/reward_mean.npy", allow_pickle=True)
MA1D50_reward_std = np.load("checkpoints/multi_agent/div_1_delay_50/reward_std.npy", allow_pickle=True)
MA1D50_inventory_mean = np.load("checkpoints/multi_agent/div_1_delay_50/inventory_mean.npy", allow_pickle=True)
MA1D50_inventory_std = np.load("checkpoints/multi_agent/div_1_delay_50/inventory_std.npy", allow_pickle=True)
MA1D50_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_50/backlog_mean.npy", allow_pickle=True)
MA1D50_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_50/backlog_std.npy", allow_pickle=True)
MA1D50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_delay_50/customer_backlog_mean.npy", allow_pickle=True)
MA1D50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_delay_50/customer_backlog_std.npy", allow_pickle=True)
MA1D50_profit = np.load("checkpoints/multi_agent/div_1_delay_50/profit.npy", allow_pickle=True)

MAI1_results = np.load("checkpoints/multi_agent/div_1_independent/results.npy", allow_pickle=True)
MAI1_time = np.load("checkpoints/multi_agent/div_1_independent/time.npy", allow_pickle=True)
MAI1_reward_mean = np.load("checkpoints/multi_agent/div_1_independent/reward_mean.npy", allow_pickle=True)
MAI1_reward_std = np.load("checkpoints/multi_agent/div_1_independent/reward_std.npy", allow_pickle=True)
MAI1_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent/inventory_mean.npy", allow_pickle=True)
MAI1_inventory_std = np.load("checkpoints/multi_agent/div_1_independent/inventory_std.npy", allow_pickle=True)
MAI1_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent/backlog_mean.npy", allow_pickle=True)
MAI1_backlog_std = np.load("checkpoints/multi_agent/div_1_independent/backlog_std.npy", allow_pickle=True)
MAI1_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent/customer_backlog_mean.npy", allow_pickle=True)
MAI1_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent/customer_backlog_std.npy", allow_pickle=True)
MAI1_profit = np.load("checkpoints/multi_agent/div_1_independent/profit.npy", allow_pickle=True)

MAI1N10_time = np.load("checkpoints/multi_agent/div_1_independent_noise_10/time.npy", allow_pickle=True)
MAI1N10_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_10/reward_mean.npy", allow_pickle=True)
MAI1N10_reward_std = np.load("checkpoints/multi_agent/div_1_independent_noise_10/reward_std.npy", allow_pickle=True)
MAI1N10_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_10/inventory_mean.npy", allow_pickle=True)
MAI1N10_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_noise_10/inventory_std.npy", allow_pickle=True)
MAI1N10_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_10/backlog_mean.npy", allow_pickle=True)
MAI1N10_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_10/backlog_std.npy", allow_pickle=True)
MAI1N10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_10/customer_backlog_mean.npy", allow_pickle=True)
MAI1N10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_10/customer_backlog_std.npy", allow_pickle=True)
MAI1N10_profit = np.load("checkpoints/multi_agent/div_1_independent_noise_10/profit.npy", allow_pickle=True)

MAI1N20_time = np.load("checkpoints/multi_agent/div_1_independent_noise_20/time.npy", allow_pickle=True)
MAI1N20_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_20/reward_mean.npy", allow_pickle=True)
MAI1N20_reward_std = np.load("checkpoints/multi_agent/div_1_independent_noise_20/reward_std.npy", allow_pickle=True)
MAI1N20_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_20/inventory_mean.npy", allow_pickle=True)
MAI1N20_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_noise_20/inventory_std.npy", allow_pickle=True)
MAI1N20_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_20/backlog_mean.npy", allow_pickle=True)
MAI1N20_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_20/backlog_std.npy", allow_pickle=True)
MAI1N20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_20/customer_backlog_mean.npy", allow_pickle=True)
MAI1N20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_20/customer_backlog_std.npy", allow_pickle=True)
MAI1N20_profit = np.load("checkpoints/multi_agent/div_1_independent_noise_20/profit.npy", allow_pickle=True)

MAI1N30_time = np.load("checkpoints/multi_agent/div_1_independent_noise_30/time.npy", allow_pickle=True)
MAI1N30_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_30/reward_mean.npy", allow_pickle=True)
MAI1N30_reward_std = np.load("checkpoints/multi_agent/div_1_independent_noise_30/reward_std.npy", allow_pickle=True)
MAI1N30_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_30/inventory_mean.npy", allow_pickle=True)
MAI1N30_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_noise_30/inventory_std.npy", allow_pickle=True)
MAI1N30_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_30/backlog_mean.npy", allow_pickle=True)
MAI1N30_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_30/backlog_std.npy", allow_pickle=True)
MAI1N30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_30/customer_backlog_mean.npy", allow_pickle=True)
MAI1N30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_30/customer_backlog_std.npy", allow_pickle=True)
MAI1N30_profit = np.load("checkpoints/multi_agent/div_1_independent_noise_30/profit.npy", allow_pickle=True)

MAI1N40_time = np.load("checkpoints/multi_agent/div_1_independent_noise_40/time.npy", allow_pickle=True)
MAI1N40_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_40/reward_mean.npy", allow_pickle=True)
MAI1N40_reward_std = np.load("checkpoints/multi_agent/div_1_independent_noise_40/reward_std.npy", allow_pickle=True)
MAI1N40_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_40/inventory_mean.npy", allow_pickle=True)
MAI1N40_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_noise_40/inventory_std.npy", allow_pickle=True)
MAI1N40_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_40/backlog_mean.npy", allow_pickle=True)
MAI1N40_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_40/backlog_std.npy", allow_pickle=True)
MAI1N40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_40/customer_backlog_mean.npy", allow_pickle=True)
MAI1N40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_40/customer_backlog_std.npy", allow_pickle=True)
MAI1N40_profit = np.load("checkpoints/multi_agent/div_1_independent_noise_40/profit.npy", allow_pickle=True)

MAI1N50_time = np.load("checkpoints/multi_agent/div_1_independent_noise_50/time.npy", allow_pickle=True)
MAI1N50_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_50/reward_mean.npy", allow_pickle=True)
MAI1N50_reward_std = np.load("checkpoints/multi_agent/div_1_independent_noise_50/reward_std.npy", allow_pickle=True)
MAI1N50_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_50/inventory_mean.npy", allow_pickle=True)
MAI1N50_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_noise_50/inventory_std.npy", allow_pickle=True)
MAI1N50_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_50/backlog_mean.npy", allow_pickle=True)
MAI1N50_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_50/backlog_std.npy", allow_pickle=True)
MAI1N50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_noise_50/customer_backlog_mean.npy", allow_pickle=True)
MAI1N50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_noise_50/customer_backlog_std.npy", allow_pickle=True)
MAI1N50_profit = np.load("checkpoints/multi_agent/div_1_independent_noise_50/profit.npy", allow_pickle=True)

MAI1D10_time = np.load("checkpoints/multi_agent/div_1_independent_delay_10/time.npy", allow_pickle=True)
MAI1D10_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_10/reward_mean.npy", allow_pickle=True)
MAI1D10_reward_std = np.load("checkpoints/multi_agent/div_1_independent_delay_10/reward_std.npy", allow_pickle=True)
MAI1D10_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_10/inventory_mean.npy", allow_pickle=True)
MAI1D10_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_delay_10/inventory_std.npy", allow_pickle=True)
MAI1D10_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_10/backlog_mean.npy", allow_pickle=True)
MAI1D10_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_10/backlog_std.npy", allow_pickle=True)
MAI1D10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_10/customer_backlog_mean.npy", allow_pickle=True)
MAI1D10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_10/customer_backlog_std.npy", allow_pickle=True)
MAI1D10_profit = np.load("checkpoints/multi_agent/div_1_independent_delay_10/profit.npy", allow_pickle=True)

MAI1D20_time = np.load("checkpoints/multi_agent/div_1_independent_delay_20/time.npy", allow_pickle=True)
MAI1D20_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_20/reward_mean.npy", allow_pickle=True)
MAI1D20_reward_std = np.load("checkpoints/multi_agent/div_1_independent_delay_20/reward_std.npy", allow_pickle=True)
MAI1D20_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_20/inventory_mean.npy", allow_pickle=True)
MAI1D20_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_delay_20/inventory_std.npy", allow_pickle=True)
MAI1D20_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_20/backlog_mean.npy", allow_pickle=True)
MAI1D20_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_20/backlog_std.npy", allow_pickle=True)
MAI1D20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_20/customer_backlog_mean.npy", allow_pickle=True)
MAI1D20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_20/customer_backlog_std.npy", allow_pickle=True)
MAI1D20_profit = np.load("checkpoints/multi_agent/div_1_independent_delay_20/profit.npy", allow_pickle=True)

MAI1D30_time = np.load("checkpoints/multi_agent/div_1_independent_delay_30/time.npy", allow_pickle=True)
MAI1D30_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_30/reward_mean.npy", allow_pickle=True)
MAI1D30_reward_std = np.load("checkpoints/multi_agent/div_1_independent_delay_30/reward_std.npy", allow_pickle=True)
MAI1D30_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_30/inventory_mean.npy", allow_pickle=True)
MAI1D30_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_delay_30/inventory_std.npy", allow_pickle=True)
MAI1D30_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_30/backlog_mean.npy", allow_pickle=True)
MAI1D30_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_30/backlog_std.npy", allow_pickle=True)
MAI1D30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_30/customer_backlog_mean.npy", allow_pickle=True)
MAI1D30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_30/customer_backlog_std.npy", allow_pickle=True)
MAI1D30_profit = np.load("checkpoints/multi_agent/div_1_independent_delay_30/profit.npy", allow_pickle=True)

MAI1D40_time = np.load("checkpoints/multi_agent/div_1_independent_delay_40/time.npy", allow_pickle=True)
MAI1D40_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_40/reward_mean.npy", allow_pickle=True)
MAI1D40_reward_std = np.load("checkpoints/multi_agent/div_1_independent_delay_40/reward_std.npy", allow_pickle=True)
MAI1D40_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_40/inventory_mean.npy", allow_pickle=True)
MAI1D40_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_delay_40/inventory_std.npy", allow_pickle=True)
MAI1D40_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_40/backlog_mean.npy", allow_pickle=True)
MAI1D40_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_40/backlog_std.npy", allow_pickle=True)
MAI1D40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_40/customer_backlog_mean.npy", allow_pickle=True)
MAI1D40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_40/customer_backlog_std.npy", allow_pickle=True)
MAI1D40_profit = np.load("checkpoints/multi_agent/div_1_independent_delay_40/profit.npy", allow_pickle=True)

MAI1D50_time = np.load("checkpoints/multi_agent/div_1_independent_delay_50/time.npy", allow_pickle=True)
MAI1D50_reward_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_50/reward_mean.npy", allow_pickle=True)
MAI1D50_reward_std = np.load("checkpoints/multi_agent/div_1_independent_delay_50/reward_std.npy", allow_pickle=True)
MAI1D50_inventory_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_50/inventory_mean.npy", allow_pickle=True)
MAI1D50_inventory_std = np.load("checkpoints/multi_agent/div_1_independent_delay_50/inventory_std.npy", allow_pickle=True)
MAI1D50_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_50/backlog_mean.npy", allow_pickle=True)
MAI1D50_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_50/backlog_std.npy", allow_pickle=True)
MAI1D50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_independent_delay_50/customer_backlog_mean.npy", allow_pickle=True)
MAI1D50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_independent_delay_50/customer_backlog_std.npy", allow_pickle=True)
MAI1D50_profit = np.load("checkpoints/multi_agent/div_1_independent_delay_50/profit.npy", allow_pickle=True)

MAS1_results = np.load("checkpoints/multi_agent/div_1_share/results.npy", allow_pickle=True)
MAS1_time = np.load("checkpoints/multi_agent/div_1_share/time.npy", allow_pickle=True)
MAS1_reward_mean = np.load("checkpoints/multi_agent/div_1_share/reward_mean.npy", allow_pickle=True)
MAS1_reward_std = np.load("checkpoints/multi_agent/div_1_share/reward_std.npy", allow_pickle=True)
MAS1_inventory_mean = np.load("checkpoints/multi_agent/div_1_share/inventory_mean.npy", allow_pickle=True)
MAS1_inventory_std = np.load("checkpoints/multi_agent/div_1_share/inventory_std.npy", allow_pickle=True)
MAS1_backlog_mean = np.load("checkpoints/multi_agent/div_1_share/backlog_mean.npy", allow_pickle=True)
MAS1_backlog_std = np.load("checkpoints/multi_agent/div_1_share/backlog_std.npy", allow_pickle=True)
MAS1_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share/customer_backlog_mean.npy", allow_pickle=True)
MAS1_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share/customer_backlog_std.npy", allow_pickle=True)
MAS1_profit = np.load("checkpoints/multi_agent/div_1_share/profit.npy", allow_pickle=True)

MAS1N10_time = np.load("checkpoints/multi_agent/div_1_share_noise_10/time.npy", allow_pickle=True)
MAS1N10_reward_mean = np.load("checkpoints/multi_agent/div_1_share_noise_10/reward_mean.npy", allow_pickle=True)
MAS1N10_reward_std = np.load("checkpoints/multi_agent/div_1_share_noise_10/reward_std.npy", allow_pickle=True)
MAS1N10_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_noise_10/inventory_mean.npy", allow_pickle=True)
MAS1N10_inventory_std = np.load("checkpoints/multi_agent/div_1_share_noise_10/inventory_std.npy", allow_pickle=True)
MAS1N10_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_10/backlog_mean.npy", allow_pickle=True)
MAS1N10_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_10/backlog_std.npy", allow_pickle=True)
MAS1N10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_10/customer_backlog_mean.npy", allow_pickle=True)
MAS1N10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_10/customer_backlog_std.npy", allow_pickle=True)
MAS1N10_profit = np.load("checkpoints/multi_agent/div_1_share_noise_10/profit.npy", allow_pickle=True)

MAS1N20_time = np.load("checkpoints/multi_agent/div_1_share_noise_20/time.npy", allow_pickle=True)
MAS1N20_reward_mean = np.load("checkpoints/multi_agent/div_1_share_noise_20/reward_mean.npy", allow_pickle=True)
MAS1N20_reward_std = np.load("checkpoints/multi_agent/div_1_share_noise_20/reward_std.npy", allow_pickle=True)
MAS1N20_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_noise_20/inventory_mean.npy", allow_pickle=True)
MAS1N20_inventory_std = np.load("checkpoints/multi_agent/div_1_share_noise_20/inventory_std.npy", allow_pickle=True)
MAS1N20_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_20/backlog_mean.npy", allow_pickle=True)
MAS1N20_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_20/backlog_std.npy", allow_pickle=True)
MAS1N20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_20/customer_backlog_mean.npy", allow_pickle=True)
MAS1N20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_20/customer_backlog_std.npy", allow_pickle=True)
MAS1N20_profit = np.load("checkpoints/multi_agent/div_1_share_noise_20/profit.npy", allow_pickle=True)

MAS1N30_time = np.load("checkpoints/multi_agent/div_1_share_noise_30/time.npy", allow_pickle=True)
MAS1N30_reward_mean = np.load("checkpoints/multi_agent/div_1_share_noise_30/reward_mean.npy", allow_pickle=True)
MAS1N30_reward_std = np.load("checkpoints/multi_agent/div_1_share_noise_30/reward_std.npy", allow_pickle=True)
MAS1N30_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_noise_30/inventory_mean.npy", allow_pickle=True)
MAS1N30_inventory_std = np.load("checkpoints/multi_agent/div_1_share_noise_30/inventory_std.npy", allow_pickle=True)
MAS1N30_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_30/backlog_mean.npy", allow_pickle=True)
MAS1N30_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_30/backlog_std.npy", allow_pickle=True)
MAS1N30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_30/customer_backlog_mean.npy", allow_pickle=True)
MAS1N30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_30/customer_backlog_std.npy", allow_pickle=True)
MAS1N30_profit = np.load("checkpoints/multi_agent/div_1_share_noise_30/profit.npy", allow_pickle=True)

MAS1N40_time = np.load("checkpoints/multi_agent/div_1_share_noise_40/time.npy", allow_pickle=True)
MAS1N40_reward_mean = np.load("checkpoints/multi_agent/div_1_share_noise_40/reward_mean.npy", allow_pickle=True)
MAS1N40_reward_std = np.load("checkpoints/multi_agent/div_1_share_noise_40/reward_std.npy", allow_pickle=True)
MAS1N40_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_noise_40/inventory_mean.npy", allow_pickle=True)
MAS1N40_inventory_std = np.load("checkpoints/multi_agent/div_1_share_noise_40/inventory_std.npy", allow_pickle=True)
MAS1N40_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_40/backlog_mean.npy", allow_pickle=True)
MAS1N40_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_40/backlog_std.npy", allow_pickle=True)
MAS1N40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_40/customer_backlog_mean.npy", allow_pickle=True)
MAS1N40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_40/customer_backlog_std.npy", allow_pickle=True)
MAS1N40_profit = np.load("checkpoints/multi_agent/div_1_share_noise_40/profit.npy", allow_pickle=True)

MAS1N50_time = np.load("checkpoints/multi_agent/div_1_share_noise_50/time.npy", allow_pickle=True)
MAS1N50_reward_mean = np.load("checkpoints/multi_agent/div_1_share_noise_50/reward_mean.npy", allow_pickle=True)
MAS1N50_reward_std = np.load("checkpoints/multi_agent/div_1_share_noise_50/reward_std.npy", allow_pickle=True)
MAS1N50_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_noise_50/inventory_mean.npy", allow_pickle=True)
MAS1N50_inventory_std = np.load("checkpoints/multi_agent/div_1_share_noise_50/inventory_std.npy", allow_pickle=True)
MAS1N50_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_50/backlog_mean.npy", allow_pickle=True)
MAS1N50_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_50/backlog_std.npy", allow_pickle=True)
MAS1N50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_noise_50/customer_backlog_mean.npy", allow_pickle=True)
MAS1N50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_noise_50/customer_backlog_std.npy", allow_pickle=True)
MAS1N50_profit = np.load("checkpoints/multi_agent/div_1_share_noise_50/profit.npy", allow_pickle=True)

MAS1D10_time = np.load("checkpoints/multi_agent/div_1_share_delay_10/time.npy", allow_pickle=True)
MAS1D10_reward_mean = np.load("checkpoints/multi_agent/div_1_share_delay_10/reward_mean.npy", allow_pickle=True)
MAS1D10_reward_std = np.load("checkpoints/multi_agent/div_1_share_delay_10/reward_std.npy", allow_pickle=True)
MAS1D10_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_delay_10/inventory_mean.npy", allow_pickle=True)
MAS1D10_inventory_std = np.load("checkpoints/multi_agent/div_1_share_delay_10/inventory_std.npy", allow_pickle=True)
MAS1D10_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_10/backlog_mean.npy", allow_pickle=True)
MAS1D10_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_10/backlog_std.npy", allow_pickle=True)
MAS1D10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_10/customer_backlog_mean.npy", allow_pickle=True)
MAS1D10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_10/customer_backlog_std.npy", allow_pickle=True)
MAS1D10_profit = np.load("checkpoints/multi_agent/div_1_share_delay_10/profit.npy", allow_pickle=True)

MAS1D20_time = np.load("checkpoints/multi_agent/div_1_share_delay_20/time.npy", allow_pickle=True)
MAS1D20_reward_mean = np.load("checkpoints/multi_agent/div_1_share_delay_20/reward_mean.npy", allow_pickle=True)
MAS1D20_reward_std = np.load("checkpoints/multi_agent/div_1_share_delay_20/reward_std.npy", allow_pickle=True)
MAS1D20_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_delay_20/inventory_mean.npy", allow_pickle=True)
MAS1D20_inventory_std = np.load("checkpoints/multi_agent/div_1_share_delay_20/inventory_std.npy", allow_pickle=True)
MAS1D20_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_20/backlog_mean.npy", allow_pickle=True)
MAS1D20_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_20/backlog_std.npy", allow_pickle=True)
MAS1D20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_20/customer_backlog_mean.npy", allow_pickle=True)
MAS1D20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_20/customer_backlog_std.npy", allow_pickle=True)
MAS1D20_profit = np.load("checkpoints/multi_agent/div_1_share_delay_20/profit.npy", allow_pickle=True)

MAS1D30_time = np.load("checkpoints/multi_agent/div_1_share_delay_30/time.npy", allow_pickle=True)
MAS1D30_reward_mean = np.load("checkpoints/multi_agent/div_1_share_delay_30/reward_mean.npy", allow_pickle=True)
MAS1D30_reward_std = np.load("checkpoints/multi_agent/div_1_share_delay_30/reward_std.npy", allow_pickle=True)
MAS1D30_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_delay_30/inventory_mean.npy", allow_pickle=True)
MAS1D30_inventory_std = np.load("checkpoints/multi_agent/div_1_share_delay_30/inventory_std.npy", allow_pickle=True)
MAS1D30_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_30/backlog_mean.npy", allow_pickle=True)
MAS1D30_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_30/backlog_std.npy", allow_pickle=True)
MAS1D30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_30/customer_backlog_mean.npy", allow_pickle=True)
MAS1D30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_30/customer_backlog_std.npy", allow_pickle=True)
MAS1D30_profit = np.load("checkpoints/multi_agent/div_1_share_delay_30/profit.npy", allow_pickle=True)

MAS1D40_time = np.load("checkpoints/multi_agent/div_1_share_delay_40/time.npy", allow_pickle=True)
MAS1D40_reward_mean = np.load("checkpoints/multi_agent/div_1_share_delay_40/reward_mean.npy", allow_pickle=True)
MAS1D40_reward_std = np.load("checkpoints/multi_agent/div_1_share_delay_40/reward_std.npy", allow_pickle=True)
MAS1D40_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_delay_40/inventory_mean.npy", allow_pickle=True)
MAS1D40_inventory_std = np.load("checkpoints/multi_agent/div_1_share_delay_40/inventory_std.npy", allow_pickle=True)
MAS1D40_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_40/backlog_mean.npy", allow_pickle=True)
MAS1D40_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_40/backlog_std.npy", allow_pickle=True)
MAS1D40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_40/customer_backlog_mean.npy", allow_pickle=True)
MAS1D40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_40/customer_backlog_std.npy", allow_pickle=True)
MAS1D40_profit = np.load("checkpoints/multi_agent/div_1_share_delay_40/profit.npy", allow_pickle=True)

MAS1D50_time = np.load("checkpoints/multi_agent/div_1_share_delay_50/time.npy", allow_pickle=True)
MAS1D50_reward_mean = np.load("checkpoints/multi_agent/div_1_share_delay_50/reward_mean.npy", allow_pickle=True)
MAS1D50_reward_std = np.load("checkpoints/multi_agent/div_1_share_delay_50/reward_std.npy", allow_pickle=True)
MAS1D50_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_delay_50/inventory_mean.npy", allow_pickle=True)
MAS1D50_inventory_std = np.load("checkpoints/multi_agent/div_1_share_delay_50/inventory_std.npy", allow_pickle=True)
MAS1D50_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_50/backlog_mean.npy", allow_pickle=True)
MAS1D50_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_50/backlog_std.npy", allow_pickle=True)
MAS1D50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_delay_50/customer_backlog_mean.npy", allow_pickle=True)
MAS1D50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_delay_50/customer_backlog_std.npy", allow_pickle=True)
MAS1D50_profit = np.load("checkpoints/multi_agent/div_1_share_delay_50/profit.npy", allow_pickle=True)

MASI1_results = np.load("checkpoints/multi_agent/div_1_share_independent/results.npy", allow_pickle=True)
MASI1_time = np.load("checkpoints/multi_agent/div_1_share_independent/time.npy", allow_pickle=True)
MASI1_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent/reward_mean.npy", allow_pickle=True)
MASI1_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent/reward_std.npy", allow_pickle=True)
MASI1_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent/inventory_mean.npy", allow_pickle=True)
MASI1_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent/inventory_std.npy", allow_pickle=True)
MASI1_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent/backlog_mean.npy", allow_pickle=True)
MASI1_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent/backlog_std.npy", allow_pickle=True)
MASI1_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent/customer_backlog_mean.npy", allow_pickle=True)
MASI1_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent/customer_backlog_std.npy", allow_pickle=True)
MASI1_profit = np.load("checkpoints/multi_agent/div_1_share_independent/profit.npy", allow_pickle=True)

MASI1N10_time = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/time.npy", allow_pickle=True)
MASI1N10_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/reward_mean.npy", allow_pickle=True)
MASI1N10_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/reward_std.npy", allow_pickle=True)
MASI1N10_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/inventory_mean.npy", allow_pickle=True)
MASI1N10_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/inventory_std.npy", allow_pickle=True)
MASI1N10_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/backlog_mean.npy", allow_pickle=True)
MASI1N10_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/backlog_std.npy", allow_pickle=True)
MASI1N10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/customer_backlog_mean.npy", allow_pickle=True)
MASI1N10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/customer_backlog_std.npy", allow_pickle=True)
MASI1N10_profit = np.load("checkpoints/multi_agent/div_1_share_independent_noise_10/profit.npy", allow_pickle=True)

MASI1N20_time = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/time.npy", allow_pickle=True)
MASI1N20_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/reward_mean.npy", allow_pickle=True)
MASI1N20_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/reward_std.npy", allow_pickle=True)
MASI1N20_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/inventory_mean.npy", allow_pickle=True)
MASI1N20_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/inventory_std.npy", allow_pickle=True)
MASI1N20_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/backlog_mean.npy", allow_pickle=True)
MASI1N20_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/backlog_std.npy", allow_pickle=True)
MASI1N20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/customer_backlog_mean.npy", allow_pickle=True)
MASI1N20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/customer_backlog_std.npy", allow_pickle=True)
MASI1N20_profit = np.load("checkpoints/multi_agent/div_1_share_independent_noise_20/profit.npy", allow_pickle=True)

MASI1N30_time = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/time.npy", allow_pickle=True)
MASI1N30_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/reward_mean.npy", allow_pickle=True)
MASI1N30_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/reward_std.npy", allow_pickle=True)
MASI1N30_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/inventory_mean.npy", allow_pickle=True)
MASI1N30_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/inventory_std.npy", allow_pickle=True)
MASI1N30_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/backlog_mean.npy", allow_pickle=True)
MASI1N30_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/backlog_std.npy", allow_pickle=True)
MASI1N30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/customer_backlog_mean.npy", allow_pickle=True)
MASI1N30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/customer_backlog_std.npy", allow_pickle=True)
MASI1N30_profit = np.load("checkpoints/multi_agent/div_1_share_independent_noise_30/profit.npy", allow_pickle=True)

MASI1N40_time = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/time.npy", allow_pickle=True)
MASI1N40_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/reward_mean.npy", allow_pickle=True)
MASI1N40_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/reward_std.npy", allow_pickle=True)
MASI1N40_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/inventory_mean.npy", allow_pickle=True)
MASI1N40_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/inventory_std.npy", allow_pickle=True)
MASI1N40_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/backlog_mean.npy", allow_pickle=True)
MASI1N40_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/backlog_std.npy", allow_pickle=True)
MASI1N40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/customer_backlog_mean.npy", allow_pickle=True)
MASI1N40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/customer_backlog_std.npy", allow_pickle=True)
MASI1N40_profit = np.load("checkpoints/multi_agent/div_1_share_independent_noise_40/profit.npy", allow_pickle=True)

MASI1N50_time = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/time.npy", allow_pickle=True)
MASI1N50_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/reward_mean.npy", allow_pickle=True)
MASI1N50_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/reward_std.npy", allow_pickle=True)
MASI1N50_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/inventory_mean.npy", allow_pickle=True)
MASI1N50_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/inventory_std.npy", allow_pickle=True)
MASI1N50_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/backlog_mean.npy", allow_pickle=True)
MASI1N50_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/backlog_std.npy", allow_pickle=True)
MASI1N50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/customer_backlog_mean.npy", allow_pickle=True)
MASI1N50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/customer_backlog_std.npy", allow_pickle=True)
MASI1N50_profit = np.load("checkpoints/multi_agent/div_1_share_independent_noise_50/profit.npy", allow_pickle=True)

MASI1D10_time = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/time.npy", allow_pickle=True)
MASI1D10_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/reward_mean.npy", allow_pickle=True)
MASI1D10_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/reward_std.npy", allow_pickle=True)
MASI1D10_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/inventory_mean.npy", allow_pickle=True)
MASI1D10_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/inventory_std.npy", allow_pickle=True)
MASI1D10_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/backlog_mean.npy", allow_pickle=True)
MASI1D10_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/backlog_std.npy", allow_pickle=True)
MASI1D10_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/customer_backlog_mean.npy", allow_pickle=True)
MASI1D10_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/customer_backlog_std.npy", allow_pickle=True)
MASI1D10_profit = np.load("checkpoints/multi_agent/div_1_share_independent_delay_10/profit.npy", allow_pickle=True)

MASI1D20_time = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/time.npy", allow_pickle=True)
MASI1D20_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/reward_mean.npy", allow_pickle=True)
MASI1D20_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/reward_std.npy", allow_pickle=True)
MASI1D20_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/inventory_mean.npy", allow_pickle=True)
MASI1D20_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/inventory_std.npy", allow_pickle=True)
MASI1D20_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/backlog_mean.npy", allow_pickle=True)
MASI1D20_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/backlog_std.npy", allow_pickle=True)
MASI1D20_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/customer_backlog_mean.npy", allow_pickle=True)
MASI1D20_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/customer_backlog_std.npy", allow_pickle=True)
MASI1D20_profit = np.load("checkpoints/multi_agent/div_1_share_independent_delay_20/profit.npy", allow_pickle=True)

MASI1D30_time = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/time.npy", allow_pickle=True)
MASI1D30_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/reward_mean.npy", allow_pickle=True)
MASI1D30_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/reward_std.npy", allow_pickle=True)
MASI1D30_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/inventory_mean.npy", allow_pickle=True)
MASI1D30_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/inventory_std.npy", allow_pickle=True)
MASI1D30_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/backlog_mean.npy", allow_pickle=True)
MASI1D30_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/backlog_std.npy", allow_pickle=True)
MASI1D30_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/customer_backlog_mean.npy", allow_pickle=True)
MASI1D30_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/customer_backlog_std.npy", allow_pickle=True)
MASI1D30_profit = np.load("checkpoints/multi_agent/div_1_share_independent_delay_30/profit.npy", allow_pickle=True)

MASI1D40_time = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/time.npy", allow_pickle=True)
MASI1D40_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/reward_mean.npy", allow_pickle=True)
MASI1D40_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/reward_std.npy", allow_pickle=True)
MASI1D40_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/inventory_mean.npy", allow_pickle=True)
MASI1D40_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/inventory_std.npy", allow_pickle=True)
MASI1D40_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/backlog_mean.npy", allow_pickle=True)
MASI1D40_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/backlog_std.npy", allow_pickle=True)
MASI1D40_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/customer_backlog_mean.npy", allow_pickle=True)
MASI1D40_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/customer_backlog_std.npy", allow_pickle=True)
MASI1D40_profit = np.load("checkpoints/multi_agent/div_1_share_independent_delay_40/profit.npy", allow_pickle=True)

MASI1D50_reward_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/reward_mean.npy", allow_pickle=True)
MASI1D50_reward_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/reward_std.npy", allow_pickle=True)
MASI1D50_inventory_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/inventory_mean.npy", allow_pickle=True)
MASI1D50_inventory_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/inventory_std.npy", allow_pickle=True)
MASI1D50_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/backlog_mean.npy", allow_pickle=True)
MASI1D50_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/backlog_std.npy", allow_pickle=True)
MASI1D50_customer_backlog_mean = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/customer_backlog_mean.npy", allow_pickle=True)
MASI1D50_customer_backlog_std = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/customer_backlog_std.npy", allow_pickle=True)
MASI1D50_profit = np.load("checkpoints/multi_agent/div_1_share_independent_delay_50/profit.npy", allow_pickle=True)

#%% Load noise trained MA Rl Data
NMA1N10_time = np.load("checkpoints/multi_agent_noisy_demand/div1_10/time.npy", allow_pickle=True)
NMA1N10_reward_mean = np.load("checkpoints/multi_agent_noisy_demand/div1_10/reward_mean.npy", allow_pickle=True)
NMA1N10_reward_std = np.load("checkpoints/multi_agent_noisy_demand/div1_10/reward_std.npy", allow_pickle=True)
NMA1N10_profit = np.load("checkpoints/multi_agent_noisy_demand/div1_10/profit.npy", allow_pickle=True)

NMA1N20_time = np.load("checkpoints/multi_agent_noisy_demand/div1_20/time.npy", allow_pickle=True)
NMA1N20_reward_mean = np.load("checkpoints/multi_agent_noisy_demand/div1_20/reward_mean.npy", allow_pickle=True)
NMA1N20_reward_std = np.load("checkpoints/multi_agent_noisy_demand/div1_20/reward_std.npy", allow_pickle=True)
NMA1N20_profit = np.load("checkpoints/multi_agent_noisy_demand/div1_20/profit.npy", allow_pickle=True)

NMA1N30_time = np.load("checkpoints/multi_agent_noisy_demand/div1_30/time.npy", allow_pickle=True)
NMA1N30_reward_mean = np.load("checkpoints/multi_agent_noisy_demand/div1_30/reward_mean.npy", allow_pickle=True)
NMA1N30_reward_std = np.load("checkpoints/multi_agent_noisy_demand/div1_30/reward_std.npy", allow_pickle=True)
NMA1N30_profit = np.load("checkpoints/multi_agent_noisy_demand/div1_30/profit.npy", allow_pickle=True)

NMA1N40_time = np.load("checkpoints/multi_agent_noisy_demand/div1_40/time.npy", allow_pickle=True)
NMA1N40_reward_mean = np.load("checkpoints/multi_agent_noisy_demand/div1_40/reward_mean.npy", allow_pickle=True)
NMA1N40_reward_std = np.load("checkpoints/multi_agent_noisy_demand/div1_40/reward_std.npy", allow_pickle=True)
NMA1N40_profit = np.load("checkpoints/multi_agent_noisy_demand/div1_40/profit.npy", allow_pickle=True)

NMA1N50_time = np.load("checkpoints/multi_agent_noisy_demand/div1_50/time.npy", allow_pickle=True)
NMA1N50_reward_mean = np.load("checkpoints/multi_agent_noisy_demand/div1_50/reward_mean.npy", allow_pickle=True)
NMA1N50_reward_std = np.load("checkpoints/multi_agent_noisy_demand/div1_50/reward_std.npy", allow_pickle=True)
NMA1N50_profit = np.load("checkpoints/multi_agent_noisy_demand/div1_50/profit.npy", allow_pickle=True)

NMA1D10_time = np.load("checkpoints/multi_agent_noisy_delay/div1_10/time.npy", allow_pickle=True)
NMA1D10_reward_mean = np.load("checkpoints/multi_agent_noisy_delay/div1_10/reward_mean.npy", allow_pickle=True)
NMA1D10_reward_std = np.load("checkpoints/multi_agent_noisy_delay/div1_10/reward_std.npy", allow_pickle=True)
NMA1D10_profit = np.load("checkpoints/multi_agent_noisy_delay/div1_10/profit.npy", allow_pickle=True)

NMA1D20_time = np.load("checkpoints/multi_agent_noisy_delay/div1_20/time.npy", allow_pickle=True)
NMA1D20_reward_mean = np.load("checkpoints/multi_agent_noisy_delay/div1_20/reward_mean.npy", allow_pickle=True)
NMA1D20_reward_std = np.load("checkpoints/multi_agent_noisy_delay/div1_20/reward_std.npy", allow_pickle=True)
NMA1D20_profit = np.load("checkpoints/multi_agent_noisy_delay/div1_20/profit.npy", allow_pickle=True)

NMA1D30_time = np.load("checkpoints/multi_agent_noisy_delay/div1_30/time.npy", allow_pickle=True)
NMA1D30_reward_mean = np.load("checkpoints/multi_agent_noisy_delay/div1_30/reward_mean.npy", allow_pickle=True)
NMA1D30_reward_std = np.load("checkpoints/multi_agent_noisy_delay/div1_30/reward_std.npy", allow_pickle=True)
NMA1D30_profit = np.load("checkpoints/multi_agent_noisy_delay/div1_30/profit.npy", allow_pickle=True)

NMA1D40_time = np.load("checkpoints/multi_agent_noisy_delay/div1_40/time.npy", allow_pickle=True)
NMA1D40_reward_mean = np.load("checkpoints/multi_agent_noisy_delay/div1_40/reward_mean.npy", allow_pickle=True)
NMA1D40_reward_std = np.load("checkpoints/multi_agent_noisy_delay/div1_40/reward_std.npy", allow_pickle=True)
NMA1D40_profit = np.load("checkpoints/multi_agent_noisy_delay/div1_40/profit.npy", allow_pickle=True)

NMA1D50_time = np.load("checkpoints/multi_agent_noisy_delay/div1_50/time.npy", allow_pickle=True)
NMA1D50_reward_mean = np.load("checkpoints/multi_agent_noisy_delay/div1_50/reward_mean.npy", allow_pickle=True)
NMA1D50_reward_std = np.load("checkpoints/multi_agent_noisy_delay/div1_50/reward_std.npy", allow_pickle=True)
NMA1D50_profit = np.load("checkpoints/multi_agent_noisy_delay/div1_50/profit.npy", allow_pickle=True)
#%% Load noise trained MA Shared Rl Data
NMAS1N10_time = np.load("checkpoints/multi_agent_share_noisy_demand/div1_10/time.npy", allow_pickle=True)
NMAS1N10_reward_mean = np.load("checkpoints/multi_agent_share_noisy_demand/div1_10/reward_mean.npy", allow_pickle=True)
NMAS1N10_reward_std = np.load("checkpoints/multi_agent_share_noisy_demand/div1_10/reward_std.npy", allow_pickle=True)
NMAS1N10_profit = np.load("checkpoints/multi_agent_share_noisy_demand/div1_10/profit.npy", allow_pickle=True)

NMAS1N20_time = np.load("checkpoints/multi_agent_share_noisy_demand/div1_20/time.npy", allow_pickle=True)
NMAS1N20_reward_mean = np.load("checkpoints/multi_agent_share_noisy_demand/div1_20/reward_mean.npy", allow_pickle=True)
NMAS1N20_reward_std = np.load("checkpoints/multi_agent_share_noisy_demand/div1_20/reward_std.npy", allow_pickle=True)
NMAS1N20_profit = np.load("checkpoints/multi_agent_share_noisy_demand/div1_20/profit.npy", allow_pickle=True)

NMAS1N30_time = np.load("checkpoints/multi_agent_share_noisy_demand/div1_30/time.npy", allow_pickle=True)
NMAS1N30_reward_mean = np.load("checkpoints/multi_agent_share_noisy_demand/div1_30/reward_mean.npy", allow_pickle=True)
NMAS1N30_reward_std = np.load("checkpoints/multi_agent_share_noisy_demand/div1_30/reward_std.npy", allow_pickle=True)
NMAS1N30_profit = np.load("checkpoints/multi_agent_share_noisy_demand/div1_30/profit.npy", allow_pickle=True)

NMAS1N40_time = np.load("checkpoints/multi_agent_share_noisy_demand/div1_40/time.npy", allow_pickle=True)
NMAS1N40_reward_mean = np.load("checkpoints/multi_agent_share_noisy_demand/div1_40/reward_mean.npy", allow_pickle=True)
NMAS1N40_reward_std = np.load("checkpoints/multi_agent_share_noisy_demand/div1_40/reward_std.npy", allow_pickle=True)
NMAS1N40_profit = np.load("checkpoints/multi_agent_share_noisy_demand/div1_40/profit.npy", allow_pickle=True)

NMAS1N50_time = np.load("checkpoints/multi_agent_share_noisy_demand/div1_50/time.npy", allow_pickle=True)
NMAS1N50_reward_mean = np.load("checkpoints/multi_agent_share_noisy_demand/div1_50/reward_mean.npy", allow_pickle=True)
NMAS1N50_reward_std = np.load("checkpoints/multi_agent_share_noisy_demand/div1_50/reward_std.npy", allow_pickle=True)
NMAS1N50_profit = np.load("checkpoints/multi_agent_share_noisy_demand/div1_50/profit.npy", allow_pickle=True)

NMAS1D10_time = np.load("checkpoints/multi_agent_share_noisy_delay/div1_10/time.npy", allow_pickle=True)
NMAS1D10_reward_mean = np.load("checkpoints/multi_agent_share_noisy_delay/div1_10/reward_mean.npy", allow_pickle=True)
NMAS1D10_reward_std = np.load("checkpoints/multi_agent_share_noisy_delay/div1_10/reward_std.npy", allow_pickle=True)
NMAS1D10_profit = np.load("checkpoints/multi_agent_share_noisy_delay/div1_10/profit.npy", allow_pickle=True)

NMAS1D20_time = np.load("checkpoints/multi_agent_share_noisy_delay/div1_20/time.npy", allow_pickle=True)
NMAS1D20_reward_mean = np.load("checkpoints/multi_agent_share_noisy_delay/div1_20/reward_mean.npy", allow_pickle=True)
NMAS1D20_reward_std = np.load("checkpoints/multi_agent_share_noisy_delay/div1_20/reward_std.npy", allow_pickle=True)
NMAS1D20_profit = np.load("checkpoints/multi_agent_share_noisy_delay/div1_20/profit.npy", allow_pickle=True)

NMAS1D30_time = np.load("checkpoints/multi_agent_share_noisy_delay/div1_30/time.npy", allow_pickle=True)
NMAS1D30_reward_mean = np.load("checkpoints/multi_agent_share_noisy_delay/div1_30/reward_mean.npy", allow_pickle=True)
NMAS1D30_reward_std = np.load("checkpoints/multi_agent_share_noisy_delay/div1_30/reward_std.npy", allow_pickle=True)
NMAS1D30_profit = np.load("checkpoints/multi_agent_share_noisy_delay/div1_30/profit.npy", allow_pickle=True)

NMAS1D40_time = np.load("checkpoints/multi_agent_share_noisy_delay/div1_40/time.npy", allow_pickle=True)
NMAS1D40_reward_mean = np.load("checkpoints/multi_agent_share_noisy_delay/div1_40/reward_mean.npy", allow_pickle=True)
NMAS1D40_reward_std = np.load("checkpoints/multi_agent_share_noisy_delay/div1_40/reward_std.npy", allow_pickle=True)
NMAS1D40_profit = np.load("checkpoints/multi_agent_share_noisy_delay/div1_40/profit.npy", allow_pickle=True)

NMAS1D50_time = np.load("checkpoints/multi_agent_share_noisy_delay/div1_50/time.npy", allow_pickle=True)
NMAS1D50_reward_mean = np.load("checkpoints/multi_agent_share_noisy_delay/div1_50/reward_mean.npy", allow_pickle=True)
NMAS1D50_reward_std = np.load("checkpoints/multi_agent_share_noisy_delay/div1_50/reward_std.npy", allow_pickle=True)
NMAS1D50_profit = np.load("checkpoints/multi_agent_share_noisy_delay/div1_50/profit.npy", allow_pickle=True)
#%% Load CC Rl Data
CC1_results = np.load("checkpoints/cc_agent/div_1/results.npy", allow_pickle=True)
CC1_time = np.load("checkpoints/cc_agent/div_1/time.npy", allow_pickle=True)
CC1_reward_mean = np.load("checkpoints/cc_agent/div_1/reward_mean.npy", allow_pickle=True)
CC1_reward_std = np.load("checkpoints/cc_agent/div_1/reward_std.npy", allow_pickle=True)
CC1_inventory_mean = np.load("checkpoints/cc_agent/div_1/inventory_mean.npy", allow_pickle=True)
CC1_inventory_std = np.load("checkpoints/cc_agent/div_1/inventory_std.npy", allow_pickle=True)
CC1_backlog_mean = np.load("checkpoints/cc_agent/div_1/backlog_mean.npy", allow_pickle=True)
CC1_backlog_std = np.load("checkpoints/cc_agent/div_1/backlog_std.npy", allow_pickle=True)
CC1_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1/customer_backlog_mean.npy", allow_pickle=True)
CC1_customer_backlog_std = np.load("checkpoints/cc_agent/div_1/customer_backlog_std.npy", allow_pickle=True)
CC1_profit = np.load("checkpoints/cc_agent/div_1/profit.npy", allow_pickle=True)

CC1N10_results = np.load("checkpoints/cc_agent/div_1_noise_10/results.npy", allow_pickle=True)
CC1N10_time = np.load("checkpoints/cc_agent/div_1_noise_10/time.npy", allow_pickle=True)
CC1N10_reward_mean = np.load("checkpoints/cc_agent/div_1_noise_10/reward_mean.npy", allow_pickle=True)
CC1N10_reward_std = np.load("checkpoints/cc_agent/div_1_noise_10/reward_std.npy", allow_pickle=True)
CC1N10_inventory_mean = np.load("checkpoints/cc_agent/div_1_noise_10/inventory_mean.npy", allow_pickle=True)
CC1N10_inventory_std = np.load("checkpoints/cc_agent/div_1_noise_10/inventory_std.npy", allow_pickle=True)
CC1N10_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_10/backlog_mean.npy", allow_pickle=True)
CC1N10_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_10/backlog_std.npy", allow_pickle=True)
CC1N10_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_10/customer_backlog_mean.npy", allow_pickle=True)
CC1N10_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_10/customer_backlog_std.npy", allow_pickle=True)
CC1N10_profit = np.load("checkpoints/cc_agent/div_1_noise_10/profit.npy", allow_pickle=True)

CC1N20_results = np.load("checkpoints/cc_agent/div_1_noise_20/results.npy", allow_pickle=True)
CC1N20_time = np.load("checkpoints/cc_agent/div_1_noise_20/time.npy", allow_pickle=True)
CC1N20_reward_mean = np.load("checkpoints/cc_agent/div_1_noise_20/reward_mean.npy", allow_pickle=True)
CC1N20_reward_std = np.load("checkpoints/cc_agent/div_1_noise_20/reward_std.npy", allow_pickle=True)
CC1N20_inventory_mean = np.load("checkpoints/cc_agent/div_1_noise_20/inventory_mean.npy", allow_pickle=True)
CC1N20_inventory_std = np.load("checkpoints/cc_agent/div_1_noise_20/inventory_std.npy", allow_pickle=True)
CC1N20_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_20/backlog_mean.npy", allow_pickle=True)
CC1N20_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_20/backlog_std.npy", allow_pickle=True)
CC1N20_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_20/customer_backlog_mean.npy", allow_pickle=True)
CC1N20_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_20/customer_backlog_std.npy", allow_pickle=True)
CC1N20_profit = np.load("checkpoints/cc_agent/div_1_noise_20/profit.npy", allow_pickle=True)

CC1N30_results = np.load("checkpoints/cc_agent/div_1_noise_30/results.npy", allow_pickle=True)
CC1N30_time = np.load("checkpoints/cc_agent/div_1_noise_30/time.npy", allow_pickle=True)
CC1N30_reward_mean = np.load("checkpoints/cc_agent/div_1_noise_30/reward_mean.npy", allow_pickle=True)
CC1N30_reward_std = np.load("checkpoints/cc_agent/div_1_noise_30/reward_std.npy", allow_pickle=True)
CC1N30_inventory_mean = np.load("checkpoints/cc_agent/div_1_noise_30/inventory_mean.npy", allow_pickle=True)
CC1N30_inventory_std = np.load("checkpoints/cc_agent/div_1_noise_30/inventory_std.npy", allow_pickle=True)
CC1N30_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_30/backlog_mean.npy", allow_pickle=True)
CC1N30_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_30/backlog_std.npy", allow_pickle=True)
CC1N30_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_30/customer_backlog_mean.npy", allow_pickle=True)
CC1N30_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_30/customer_backlog_std.npy", allow_pickle=True)
CC1N30_profit = np.load("checkpoints/cc_agent/div_1_noise_30/profit.npy", allow_pickle=True)

CC1N40_results = np.load("checkpoints/cc_agent/div_1_noise_40/results.npy", allow_pickle=True)
CC1N40_time = np.load("checkpoints/cc_agent/div_1_noise_40/time.npy", allow_pickle=True)
CC1N40_reward_mean = np.load("checkpoints/cc_agent/div_1_noise_40/reward_mean.npy", allow_pickle=True)
CC1N40_reward_std = np.load("checkpoints/cc_agent/div_1_noise_40/reward_std.npy", allow_pickle=True)
CC1N40_inventory_mean = np.load("checkpoints/cc_agent/div_1_noise_40/inventory_mean.npy", allow_pickle=True)
CC1N40_inventory_std = np.load("checkpoints/cc_agent/div_1_noise_40/inventory_std.npy", allow_pickle=True)
CC1N40_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_40/backlog_mean.npy", allow_pickle=True)
CC1N40_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_40/backlog_std.npy", allow_pickle=True)
CC1N40_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_40/customer_backlog_mean.npy", allow_pickle=True)
CC1N40_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_40/customer_backlog_std.npy", allow_pickle=True)
CC1N40_profit = np.load("checkpoints/cc_agent/div_1_noise_40/profit.npy", allow_pickle=True)

CC1N50_results = np.load("checkpoints/cc_agent/div_1_noise_50/results.npy", allow_pickle=True)
CC1N50_time = np.load("checkpoints/cc_agent/div_1_noise_50/time.npy", allow_pickle=True)
CC1N50_reward_mean = np.load("checkpoints/cc_agent/div_1_noise_50/reward_mean.npy", allow_pickle=True)
CC1N50_reward_std = np.load("checkpoints/cc_agent/div_1_noise_50/reward_std.npy", allow_pickle=True)
CC1N50_inventory_mean = np.load("checkpoints/cc_agent/div_1_noise_50/inventory_mean.npy", allow_pickle=True)
CC1N50_inventory_std = np.load("checkpoints/cc_agent/div_1_noise_50/inventory_std.npy", allow_pickle=True)
CC1N50_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_50/backlog_mean.npy", allow_pickle=True)
CC1N50_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_50/backlog_std.npy", allow_pickle=True)
CC1N50_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_noise_50/customer_backlog_mean.npy", allow_pickle=True)
CC1N50_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_noise_50/customer_backlog_std.npy", allow_pickle=True)
CC1N50_profit = np.load("checkpoints/cc_agent/div_1_noise_50/profit.npy", allow_pickle=True)

CC1D10_results = np.load("checkpoints/cc_agent/div_1_delay_10/results.npy", allow_pickle=True)
CC1D10_time = np.load("checkpoints/cc_agent/div_1_delay_10/time.npy", allow_pickle=True)
CC1D10_reward_mean = np.load("checkpoints/cc_agent/div_1_delay_10/reward_mean.npy", allow_pickle=True)
CC1D10_reward_std = np.load("checkpoints/cc_agent/div_1_delay_10/reward_std.npy", allow_pickle=True)
CC1D10_inventory_mean = np.load("checkpoints/cc_agent/div_1_delay_10/inventory_mean.npy", allow_pickle=True)
CC1D10_inventory_std = np.load("checkpoints/cc_agent/div_1_delay_10/inventory_std.npy", allow_pickle=True)
CC1D10_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_10/backlog_mean.npy", allow_pickle=True)
CC1D10_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_10/backlog_std.npy", allow_pickle=True)
CC1D10_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_10/customer_backlog_mean.npy", allow_pickle=True)
CC1D10_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_10/customer_backlog_std.npy", allow_pickle=True)
CC1D10_profit = np.load("checkpoints/cc_agent/div_1_delay_10/profit.npy", allow_pickle=True)

CC1D20_results = np.load("checkpoints/cc_agent/div_1_delay_20/results.npy", allow_pickle=True)
CC1D20_time = np.load("checkpoints/cc_agent/div_1_delay_20/time.npy", allow_pickle=True)
CC1D20_reward_mean = np.load("checkpoints/cc_agent/div_1_delay_20/reward_mean.npy", allow_pickle=True)
CC1D20_reward_std = np.load("checkpoints/cc_agent/div_1_delay_20/reward_std.npy", allow_pickle=True)
CC1D20_inventory_mean = np.load("checkpoints/cc_agent/div_1_delay_20/inventory_mean.npy", allow_pickle=True)
CC1D20_inventory_std = np.load("checkpoints/cc_agent/div_1_delay_20/inventory_std.npy", allow_pickle=True)
CC1D20_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_20/backlog_mean.npy", allow_pickle=True)
CC1D20_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_20/backlog_std.npy", allow_pickle=True)
CC1D20_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_20/customer_backlog_mean.npy", allow_pickle=True)
CC1D20_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_20/customer_backlog_std.npy", allow_pickle=True)
CC1D20_profit = np.load("checkpoints/cc_agent/div_1_delay_20/profit.npy", allow_pickle=True)

CC1D30_results = np.load("checkpoints/cc_agent/div_1_delay_30/results.npy", allow_pickle=True)
CC1D30_time = np.load("checkpoints/cc_agent/div_1_delay_30/time.npy", allow_pickle=True)
CC1D30_reward_mean = np.load("checkpoints/cc_agent/div_1_delay_30/reward_mean.npy", allow_pickle=True)
CC1D30_reward_std = np.load("checkpoints/cc_agent/div_1_delay_30/reward_std.npy", allow_pickle=True)
CC1D30_inventory_mean = np.load("checkpoints/cc_agent/div_1_delay_30/inventory_mean.npy", allow_pickle=True)
CC1D30_inventory_std = np.load("checkpoints/cc_agent/div_1_delay_30/inventory_std.npy", allow_pickle=True)
CC1D30_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_30/backlog_mean.npy", allow_pickle=True)
CC1D30_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_30/backlog_std.npy", allow_pickle=True)
CC1D30_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_30/customer_backlog_mean.npy", allow_pickle=True)
CC1D30_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_30/customer_backlog_std.npy", allow_pickle=True)
CC1D30_profit = np.load("checkpoints/cc_agent/div_1_delay_30/profit.npy", allow_pickle=True)

CC1D40_results = np.load("checkpoints/cc_agent/div_1_delay_40/results.npy", allow_pickle=True)
CC1D40_time = np.load("checkpoints/cc_agent/div_1_delay_40/time.npy", allow_pickle=True)
CC1D40_reward_mean = np.load("checkpoints/cc_agent/div_1_delay_40/reward_mean.npy", allow_pickle=True)
CC1D40_reward_std = np.load("checkpoints/cc_agent/div_1_delay_40/reward_std.npy", allow_pickle=True)
CC1D40_inventory_mean = np.load("checkpoints/cc_agent/div_1_delay_40/inventory_mean.npy", allow_pickle=True)
CC1D40_inventory_std = np.load("checkpoints/cc_agent/div_1_delay_40/inventory_std.npy", allow_pickle=True)
CC1D40_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_40/backlog_mean.npy", allow_pickle=True)
CC1D40_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_40/backlog_std.npy", allow_pickle=True)
CC1D40_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_40/customer_backlog_mean.npy", allow_pickle=True)
CC1D40_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_40/customer_backlog_std.npy", allow_pickle=True)
CC1D40_profit = np.load("checkpoints/cc_agent/div_1_delay_40/profit.npy", allow_pickle=True)

CC1D50_results = np.load("checkpoints/cc_agent/div_1_delay_50/results.npy", allow_pickle=True)
CC1D50_time = np.load("checkpoints/cc_agent/div_1_delay_50/time.npy", allow_pickle=True)
CC1D50_reward_mean = np.load("checkpoints/cc_agent/div_1_delay_50/reward_mean.npy", allow_pickle=True)
CC1D50_reward_std = np.load("checkpoints/cc_agent/div_1_delay_50/reward_std.npy", allow_pickle=True)
CC1D50_inventory_mean = np.load("checkpoints/cc_agent/div_1_delay_50/inventory_mean.npy", allow_pickle=True)
CC1D50_inventory_std = np.load("checkpoints/cc_agent/div_1_delay_50/inventory_std.npy", allow_pickle=True)
CC1D50_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_50/backlog_mean.npy", allow_pickle=True)
CC1D50_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_50/backlog_std.npy", allow_pickle=True)
CC1D50_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_delay_50/customer_backlog_mean.npy", allow_pickle=True)
CC1D50_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_delay_50/customer_backlog_std.npy", allow_pickle=True)
CC1D50_profit = np.load("checkpoints/cc_agent/div_1_delay_50/profit.npy", allow_pickle=True)

CCI1_results = np.load("checkpoints/cc_agent/div_1_independent/results.npy", allow_pickle=True)
CCI1_time = np.load("checkpoints/cc_agent/div_1_independent/time.npy", allow_pickle=True)
CCI1_reward_mean = np.load("checkpoints/cc_agent/div_1_independent/reward_mean.npy", allow_pickle=True)
CCI1_reward_std = np.load("checkpoints/cc_agent/div_1_independent/reward_std.npy", allow_pickle=True)
CCI1_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent/inventory_mean.npy", allow_pickle=True)
CCI1_inventory_std = np.load("checkpoints/cc_agent/div_1_independent/inventory_std.npy", allow_pickle=True)
CCI1_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent/backlog_mean.npy", allow_pickle=True)
CCI1_backlog_std = np.load("checkpoints/cc_agent/div_1_independent/backlog_std.npy", allow_pickle=True)
CCI1_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent/customer_backlog_mean.npy", allow_pickle=True)
CCI1_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent/customer_backlog_std.npy", allow_pickle=True)
CCI1_profit = np.load("checkpoints/cc_agent/div_1_independent/profit.npy", allow_pickle=True)

CCI1N10_results = np.load("checkpoints/cc_agent/div_1_independent_noise_10/results.npy", allow_pickle=True)
CCI1N10_time = np.load("checkpoints/cc_agent/div_1_independent_noise_10/time.npy", allow_pickle=True)
CCI1N10_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_10/reward_mean.npy", allow_pickle=True)
CCI1N10_reward_std = np.load("checkpoints/cc_agent/div_1_independent_noise_10/reward_std.npy", allow_pickle=True)
CCI1N10_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_10/inventory_mean.npy", allow_pickle=True)
CCI1N10_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_noise_10/inventory_std.npy", allow_pickle=True)
CCI1N10_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_10/backlog_mean.npy", allow_pickle=True)
CCI1N10_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_10/backlog_std.npy", allow_pickle=True)
CCI1N10_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_10/customer_backlog_mean.npy", allow_pickle=True)
CCI1N10_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_10/customer_backlog_std.npy", allow_pickle=True)
CCI1N10_profit = np.load("checkpoints/cc_agent/div_1_independent_noise_10/profit.npy", allow_pickle=True)

CCI1N20_results = np.load("checkpoints/cc_agent/div_1_independent_noise_20/results.npy", allow_pickle=True)
CCI1N20_time = np.load("checkpoints/cc_agent/div_1_independent_noise_20/time.npy", allow_pickle=True)
CCI1N20_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_20/reward_mean.npy", allow_pickle=True)
CCI1N20_reward_std = np.load("checkpoints/cc_agent/div_1_independent_noise_20/reward_std.npy", allow_pickle=True)
CCI1N20_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_20/inventory_mean.npy", allow_pickle=True)
CCI1N20_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_noise_20/inventory_std.npy", allow_pickle=True)
CCI1N20_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_20/backlog_mean.npy", allow_pickle=True)
CCI1N20_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_20/backlog_std.npy", allow_pickle=True)
CCI1N20_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_20/customer_backlog_mean.npy", allow_pickle=True)
CCI1N20_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_20/customer_backlog_std.npy", allow_pickle=True)
CCI1N20_profit = np.load("checkpoints/cc_agent/div_1_independent_noise_20/profit.npy", allow_pickle=True)

CCI1N30_results = np.load("checkpoints/cc_agent/div_1_independent_noise_30/results.npy", allow_pickle=True)
CCI1N30_time = np.load("checkpoints/cc_agent/div_1_independent_noise_30/time.npy", allow_pickle=True)
CCI1N30_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_30/reward_mean.npy", allow_pickle=True)
CCI1N30_reward_std = np.load("checkpoints/cc_agent/div_1_independent_noise_30/reward_std.npy", allow_pickle=True)
CCI1N30_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_30/inventory_mean.npy", allow_pickle=True)
CCI1N30_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_noise_30/inventory_std.npy", allow_pickle=True)
CCI1N30_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_30/backlog_mean.npy", allow_pickle=True)
CCI1N30_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_30/backlog_std.npy", allow_pickle=True)
CCI1N30_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_30/customer_backlog_mean.npy", allow_pickle=True)
CCI1N30_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_30/customer_backlog_std.npy", allow_pickle=True)
CCI1N30_profit = np.load("checkpoints/cc_agent/div_1_independent_noise_30/profit.npy", allow_pickle=True)

CCI1N40_results = np.load("checkpoints/cc_agent/div_1_independent_noise_40/results.npy", allow_pickle=True)
CCI1N40_time = np.load("checkpoints/cc_agent/div_1_independent_noise_40/time.npy", allow_pickle=True)
CCI1N40_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_40/reward_mean.npy", allow_pickle=True)
CCI1N40_reward_std = np.load("checkpoints/cc_agent/div_1_independent_noise_40/reward_std.npy", allow_pickle=True)
CCI1N40_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_40/inventory_mean.npy", allow_pickle=True)
CCI1N40_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_noise_40/inventory_std.npy", allow_pickle=True)
CCI1N40_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_40/backlog_mean.npy", allow_pickle=True)
CCI1N40_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_40/backlog_std.npy", allow_pickle=True)
CCI1N40_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_40/customer_backlog_mean.npy", allow_pickle=True)
CCI1N40_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_40/customer_backlog_std.npy", allow_pickle=True)
CCI1N40_profit = np.load("checkpoints/cc_agent/div_1_independent_noise_40/profit.npy", allow_pickle=True)

CCI1N50_results = np.load("checkpoints/cc_agent/div_1_independent_noise_50/results.npy", allow_pickle=True)
CCI1N50_time = np.load("checkpoints/cc_agent/div_1_independent_noise_50/time.npy", allow_pickle=True)
CCI1N50_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_50/reward_mean.npy", allow_pickle=True)
CCI1N50_reward_std = np.load("checkpoints/cc_agent/div_1_independent_noise_50/reward_std.npy", allow_pickle=True)
CCI1N50_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_50/inventory_mean.npy", allow_pickle=True)
CCI1N50_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_noise_50/inventory_std.npy", allow_pickle=True)
CCI1N50_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_50/backlog_mean.npy", allow_pickle=True)
CCI1N50_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_50/backlog_std.npy", allow_pickle=True)
CCI1N50_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_noise_50/customer_backlog_mean.npy", allow_pickle=True)
CCI1N50_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_noise_50/customer_backlog_std.npy", allow_pickle=True)
CCI1N50_profit = np.load("checkpoints/cc_agent/div_1_independent_noise_50/profit.npy", allow_pickle=True)

CCI1D10_results = np.load("checkpoints/cc_agent/div_1_independent_delay_10/results.npy", allow_pickle=True)
CCI1D10_time = np.load("checkpoints/cc_agent/div_1_independent_delay_10/time.npy", allow_pickle=True)
CCI1D10_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_10/reward_mean.npy", allow_pickle=True)
CCI1D10_reward_std = np.load("checkpoints/cc_agent/div_1_independent_delay_10/reward_std.npy", allow_pickle=True)
CCI1D10_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_10/inventory_mean.npy", allow_pickle=True)
CCI1D10_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_delay_10/inventory_std.npy", allow_pickle=True)
CCI1D10_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_10/backlog_mean.npy", allow_pickle=True)
CCI1D10_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_10/backlog_std.npy", allow_pickle=True)
CCI1D10_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_10/customer_backlog_mean.npy", allow_pickle=True)
CCI1D10_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_10/customer_backlog_std.npy", allow_pickle=True)
CCI1D10_profit = np.load("checkpoints/cc_agent/div_1_independent_delay_10/profit.npy", allow_pickle=True)

CCI1D20_results = np.load("checkpoints/cc_agent/div_1_independent_delay_20/results.npy", allow_pickle=True)
CCI1D20_time = np.load("checkpoints/cc_agent/div_1_independent_delay_20/time.npy", allow_pickle=True)
CCI1D20_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_20/reward_mean.npy", allow_pickle=True)
CCI1D20_reward_std = np.load("checkpoints/cc_agent/div_1_independent_delay_20/reward_std.npy", allow_pickle=True)
CCI1D20_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_20/inventory_mean.npy", allow_pickle=True)
CCI1D20_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_delay_20/inventory_std.npy", allow_pickle=True)
CCI1D20_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_20/backlog_mean.npy", allow_pickle=True)
CCI1D20_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_20/backlog_std.npy", allow_pickle=True)
CCI1D20_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_20/customer_backlog_mean.npy", allow_pickle=True)
CCI1D20_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_20/customer_backlog_std.npy", allow_pickle=True)
CCI1D20_profit = np.load("checkpoints/cc_agent/div_1_independent_delay_20/profit.npy", allow_pickle=True)

CCI1D30_results = np.load("checkpoints/cc_agent/div_1_independent_delay_30/results.npy", allow_pickle=True)
CCI1D30_time = np.load("checkpoints/cc_agent/div_1_independent_delay_30/time.npy", allow_pickle=True)
CCI1D30_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_30/reward_mean.npy", allow_pickle=True)
CCI1D30_reward_std = np.load("checkpoints/cc_agent/div_1_independent_delay_30/reward_std.npy", allow_pickle=True)
CCI1D30_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_30/inventory_mean.npy", allow_pickle=True)
CCI1D30_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_delay_30/inventory_std.npy", allow_pickle=True)
CCI1D30_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_30/backlog_mean.npy", allow_pickle=True)
CCI1D30_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_30/backlog_std.npy", allow_pickle=True)
CCI1D30_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_30/customer_backlog_mean.npy", allow_pickle=True)
CCI1D30_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_30/customer_backlog_std.npy", allow_pickle=True)
CCI1D30_profit = np.load("checkpoints/cc_agent/div_1_independent_delay_30/profit.npy", allow_pickle=True)

CCI1D40_results = np.load("checkpoints/cc_agent/div_1_independent_delay_40/results.npy", allow_pickle=True)
CCI1D40_time = np.load("checkpoints/cc_agent/div_1_independent_delay_40/time.npy", allow_pickle=True)
CCI1D40_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_40/reward_mean.npy", allow_pickle=True)
CCI1D40_reward_std = np.load("checkpoints/cc_agent/div_1_independent_delay_40/reward_std.npy", allow_pickle=True)
CCI1D40_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_40/inventory_mean.npy", allow_pickle=True)
CCI1D40_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_delay_40/inventory_std.npy", allow_pickle=True)
CCI1D40_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_40/backlog_mean.npy", allow_pickle=True)
CCI1D40_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_40/backlog_std.npy", allow_pickle=True)
CCI1D40_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_40/customer_backlog_mean.npy", allow_pickle=True)
CCI1D40_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_40/customer_backlog_std.npy", allow_pickle=True)
CCI1D40_profit = np.load("checkpoints/cc_agent/div_1_independent_delay_40/profit.npy", allow_pickle=True)

CCI1D50_results = np.load("checkpoints/cc_agent/div_1_independent_delay_50/results.npy", allow_pickle=True)
CCI1D50_time = np.load("checkpoints/cc_agent/div_1_independent_delay_50/time.npy", allow_pickle=True)
CCI1D50_reward_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_50/reward_mean.npy", allow_pickle=True)
CCI1D50_reward_std = np.load("checkpoints/cc_agent/div_1_independent_delay_50/reward_std.npy", allow_pickle=True)
CCI1D50_inventory_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_50/inventory_mean.npy", allow_pickle=True)
CCI1D50_inventory_std = np.load("checkpoints/cc_agent/div_1_independent_delay_50/inventory_std.npy", allow_pickle=True)
CCI1D50_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_50/backlog_mean.npy", allow_pickle=True)
CCI1D50_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_50/backlog_std.npy", allow_pickle=True)
CCI1D50_customer_backlog_mean = np.load("checkpoints/cc_agent/div_1_independent_delay_50/customer_backlog_mean.npy", allow_pickle=True)
CCI1D50_customer_backlog_std = np.load("checkpoints/cc_agent/div_1_independent_delay_50/customer_backlog_std.npy", allow_pickle=True)
CCI1D50_profit = np.load("checkpoints/cc_agent/div_1_independent_delay_50/profit.npy", allow_pickle=True)

ACC1_results = np.load("checkpoints/cc_agent/alt_div_1/results.npy", allow_pickle=True)
ACC1_time = np.load("checkpoints/cc_agent/alt_div_1/time.npy", allow_pickle=True)
ACC1_reward_mean = np.load("checkpoints/cc_agent/alt_div_1/reward_mean.npy", allow_pickle=True)
ACC1_reward_std = np.load("checkpoints/cc_agent/alt_div_1/reward_std.npy", allow_pickle=True)
ACC1_profit = np.load("checkpoints/cc_agent/alt_div_1/profit.npy", allow_pickle=True)

ACC1D10_results = np.load("checkpoints/cc_agent/alt_div_1_delay_10/results.npy", allow_pickle=True)
ACC1D10_time = np.load("checkpoints/cc_agent/alt_div_1_delay_10/time.npy", allow_pickle=True)
ACC1D10_reward_mean = np.load("checkpoints/cc_agent/alt_div_1_delay_10/reward_mean.npy", allow_pickle=True)
ACC1D10_reward_std = np.load("checkpoints/cc_agent/alt_div_1_delay_10/reward_std.npy", allow_pickle=True)
ACC1D10_profit = np.load("checkpoints/cc_agent/alt_div_1_delay_10/profit.npy", allow_pickle=True)

ACC1D20_results = np.load("checkpoints/cc_agent/alt_div_1_delay_20/results.npy", allow_pickle=True)
ACC1D20_time = np.load("checkpoints/cc_agent/alt_div_1_delay_20/time.npy", allow_pickle=True)
ACC1D20_reward_mean = np.load("checkpoints/cc_agent/alt_div_1_delay_20/reward_mean.npy", allow_pickle=True)
ACC1D20_reward_std = np.load("checkpoints/cc_agent/alt_div_1_delay_20/reward_std.npy", allow_pickle=True)
ACC1D20_profit = np.load("checkpoints/cc_agent/alt_div_1_delay_20/profit.npy", allow_pickle=True)

ACC1D30_results = np.load("checkpoints/cc_agent/alt_div_1_delay_30/results.npy", allow_pickle=True)
ACC1D30_time = np.load("checkpoints/cc_agent/alt_div_1_delay_30/time.npy", allow_pickle=True)
ACC1D30_reward_mean = np.load("checkpoints/cc_agent/alt_div_1_delay_30/reward_mean.npy", allow_pickle=True)
ACC1D30_reward_std = np.load("checkpoints/cc_agent/alt_div_1_delay_30/reward_std.npy", allow_pickle=True)
ACC1D30_profit = np.load("checkpoints/cc_agent/alt_div_1_delay_30/profit.npy", allow_pickle=True)

ACC1D40_results = np.load("checkpoints/cc_agent/alt_div_1_delay_40/results.npy", allow_pickle=True)
ACC1D40_time = np.load("checkpoints/cc_agent/alt_div_1_delay_40/time.npy", allow_pickle=True)
ACC1D40_reward_mean = np.load("checkpoints/cc_agent/alt_div_1_delay_40/reward_mean.npy", allow_pickle=True)
ACC1D40_reward_std = np.load("checkpoints/cc_agent/alt_div_1_delay_40/reward_std.npy", allow_pickle=True)
ACC1D40_profit = np.load("checkpoints/cc_agent/alt_div_1_delay_40/profit.npy", allow_pickle=True)

ACC1D50_results = np.load("checkpoints/cc_agent/alt_div_1_delay_50/results.npy", allow_pickle=True)
ACC1D50_time = np.load("checkpoints/cc_agent/alt_div_1_delay_50/time.npy", allow_pickle=True)
ACC1D50_reward_mean = np.load("checkpoints/cc_agent/alt_div_1_delay_50/reward_mean.npy", allow_pickle=True)
ACC1D50_reward_std = np.load("checkpoints/cc_agent/alt_div_1_delay_50/reward_std.npy", allow_pickle=True)
ACC1D50_profit = np.load("checkpoints/cc_agent/alt_div_1_delay_50/profit.npy", allow_pickle=True)

#%% Load noise trained CC Rl Data
NCC1N10_results = np.load("checkpoints/cc_agent_noisy_demand/div1_10/results.npy", allow_pickle=True)
NCC1N10_time = np.load("checkpoints/cc_agent_noisy_demand/div1_10/time.npy", allow_pickle=True)
NCC1N10_reward_mean = np.load("checkpoints/cc_agent_noisy_demand/div1_10/reward_mean.npy", allow_pickle=True)
NCC1N10_reward_std = np.load("checkpoints/cc_agent_noisy_demand/div1_10/reward_std.npy", allow_pickle=True)
NCC1N10_profit = np.load("checkpoints/cc_agent_noisy_demand/div1_10/profit.npy", allow_pickle=True)

NCC1N20_results = np.load("checkpoints/cc_agent_noisy_demand/div1_20/results.npy", allow_pickle=True)
NCC1N20_time = np.load("checkpoints/cc_agent_noisy_demand/div1_20/time.npy", allow_pickle=True)
NCC1N20_reward_mean = np.load("checkpoints/cc_agent_noisy_demand/div1_20/reward_mean.npy", allow_pickle=True)
NCC1N20_reward_std = np.load("checkpoints/cc_agent_noisy_demand/div1_20/reward_std.npy", allow_pickle=True)
NCC1N20_profit = np.load("checkpoints/cc_agent_noisy_demand/div1_20/profit.npy", allow_pickle=True)

NCC1N30_results = np.load("checkpoints/cc_agent_noisy_demand/div1_30/results.npy", allow_pickle=True)
NCC1N30_time = np.load("checkpoints/cc_agent_noisy_demand/div1_30/time.npy", allow_pickle=True)
NCC1N30_reward_mean = np.load("checkpoints/cc_agent_noisy_demand/div1_30/reward_mean.npy", allow_pickle=True)
NCC1N30_reward_std = np.load("checkpoints/cc_agent_noisy_demand/div1_30/reward_std.npy", allow_pickle=True)
NCC1N30_profit = np.load("checkpoints/cc_agent_noisy_demand/div1_30/profit.npy", allow_pickle=True)

NCC1N40_results = np.load("checkpoints/cc_agent_noisy_demand/div1_40/results.npy", allow_pickle=True)
NCC1N40_time = np.load("checkpoints/cc_agent_noisy_demand/div1_40/time.npy", allow_pickle=True)
NCC1N40_reward_mean = np.load("checkpoints/cc_agent_noisy_demand/div1_40/reward_mean.npy", allow_pickle=True)
NCC1N40_reward_std = np.load("checkpoints/cc_agent_noisy_demand/div1_40/reward_std.npy", allow_pickle=True)
NCC1N40_profit = np.load("checkpoints/cc_agent_noisy_demand/div1_40/profit.npy", allow_pickle=True)

NCC1N50_results = np.load("checkpoints/cc_agent_noisy_demand/div1_50/results.npy", allow_pickle=True)
NCC1N50_time = np.load("checkpoints/cc_agent_noisy_demand/div1_50/time.npy", allow_pickle=True)
NCC1N50_reward_mean = np.load("checkpoints/cc_agent_noisy_demand/div1_50/reward_mean.npy", allow_pickle=True)
NCC1N50_reward_std = np.load("checkpoints/cc_agent_noisy_demand/div1_50/reward_std.npy", allow_pickle=True)
NCC1N50_profit = np.load("checkpoints/cc_agent_noisy_demand/div1_50/profit.npy", allow_pickle=True)

NCC1D10_results = np.load("checkpoints/cc_agent_noisy_delay/div1_10/results.npy", allow_pickle=True)
NCC1D10_time = np.load("checkpoints/cc_agent_noisy_delay/div1_10/time.npy", allow_pickle=True)
NCC1D10_reward_mean = np.load("checkpoints/cc_agent_noisy_delay/div1_10/reward_mean.npy", allow_pickle=True)
NCC1D10_reward_std = np.load("checkpoints/cc_agent_noisy_delay/div1_10/reward_std.npy", allow_pickle=True)
NCC1D10_profit = np.load("checkpoints/cc_agent_noisy_delay/div1_10/profit.npy", allow_pickle=True)

NCC1D20_results = np.load("checkpoints/cc_agent_noisy_delay/div1_20/results.npy", allow_pickle=True)
NCC1D20_time = np.load("checkpoints/cc_agent_noisy_delay/div1_20/time.npy", allow_pickle=True)
NCC1D20_reward_mean = np.load("checkpoints/cc_agent_noisy_delay/div1_20/reward_mean.npy", allow_pickle=True)
NCC1D20_reward_std = np.load("checkpoints/cc_agent_noisy_delay/div1_20/reward_std.npy", allow_pickle=True)
NCC1D20_profit = np.load("checkpoints/cc_agent_noisy_delay/div1_20/profit.npy", allow_pickle=True)

NCC1D30_results = np.load("checkpoints/cc_agent_noisy_delay/div1_30/results.npy", allow_pickle=True)
NCC1D30_time = np.load("checkpoints/cc_agent_noisy_delay/div1_30/time.npy", allow_pickle=True)
NCC1D30_reward_mean = np.load("checkpoints/cc_agent_noisy_delay/div1_30/reward_mean.npy", allow_pickle=True)
NCC1D30_reward_std = np.load("checkpoints/cc_agent_noisy_delay/div1_30/reward_std.npy", allow_pickle=True)
NCC1D30_profit = np.load("checkpoints/cc_agent_noisy_delay/div1_30/profit.npy", allow_pickle=True)

NCC1D40_results = np.load("checkpoints/cc_agent_noisy_delay/div1_40/results.npy", allow_pickle=True)
NCC1D40_time = np.load("checkpoints/cc_agent_noisy_delay/div1_40/time.npy", allow_pickle=True)
NCC1D40_reward_mean = np.load("checkpoints/cc_agent_noisy_delay/div1_40/reward_mean.npy", allow_pickle=True)
NCC1D40_reward_std = np.load("checkpoints/cc_agent_noisy_delay/div1_40/reward_std.npy", allow_pickle=True)
NCC1D40_profit = np.load("checkpoints/cc_agent_noisy_delay/div1_40/profit.npy", allow_pickle=True)

NCC1D50_results = np.load("checkpoints/cc_agent_noisy_delay/div1_50/results.npy", allow_pickle=True)
NCC1D50_time = np.load("checkpoints/cc_agent_noisy_delay/div1_50/time.npy", allow_pickle=True)
NCC1D50_reward_mean = np.load("checkpoints/cc_agent_noisy_delay/div1_50/reward_mean.npy", allow_pickle=True)
NCC1D50_reward_std = np.load("checkpoints/cc_agent_noisy_delay/div1_50/reward_std.npy", allow_pickle=True)
NCC1D50_profit = np.load("checkpoints/cc_agent_noisy_delay/div1_50/profit.npy", allow_pickle=True)
#%% Load DFO Data
DFO1_reward_mean = np.load("checkpoints/single_agent/div_1/dfo_mean.npy", allow_pickle=True)
DFO1_reward_std = np.load("checkpoints/single_agent/div_1/dfo_std.npy", allow_pickle=True)

DFO1N10_reward_mean = np.load("checkpoints/single_agent/div_1_noise_10/dfo_mean.npy", allow_pickle=True)
DFO1N10_reward_std = np.load("checkpoints/single_agent/div_1_noise_10/dfo_std.npy", allow_pickle=True)

DFO1N20_reward_mean = np.load("checkpoints/single_agent/div_1_noise_20/dfo_mean.npy", allow_pickle=True)
DFO1N20_reward_std = np.load("checkpoints/single_agent/div_1_noise_20/dfo_std.npy", allow_pickle=True)

DFO1N30_reward_mean = np.load("checkpoints/single_agent/div_1_noise_30/dfo_mean.npy", allow_pickle=True)
DFO1N30_reward_std = np.load("checkpoints/single_agent/div_1_noise_30/dfo_std.npy", allow_pickle=True)

DFO1N40_reward_mean = np.load("checkpoints/single_agent/div_1_noise_40/dfo_mean.npy", allow_pickle=True)
DFO1N40_reward_std = np.load("checkpoints/single_agent/div_1_noise_40/dfo_std.npy", allow_pickle=True)

DFO1N50_reward_mean = np.load("checkpoints/single_agent/div_1_noise_50/dfo_mean.npy", allow_pickle=True)
DFO1N50_reward_std = np.load("checkpoints/single_agent/div_1_noise_50/dfo_std.npy", allow_pickle=True)

DFO1D10_reward_mean = np.load("checkpoints/single_agent/div_1_delay_10/dfo_mean.npy", allow_pickle=True)
DFO1D10_reward_std = np.load("checkpoints/single_agent/div_1_delay_10/dfo_std.npy", allow_pickle=True)

DFO1D20_reward_mean = np.load("checkpoints/single_agent/div_1_delay_20/dfo_mean.npy", allow_pickle=True)
DFO1D20_reward_std = np.load("checkpoints/single_agent/div_1_delay_20/dfo_std.npy", allow_pickle=True)

DFO1D30_reward_mean = np.load("checkpoints/single_agent/div_1_delay_30/dfo_mean.npy", allow_pickle=True)
DFO1D30_reward_std = np.load("checkpoints/single_agent/div_1_delay_30/dfo_std.npy", allow_pickle=True)

DFO1D40_reward_mean = np.load("checkpoints/single_agent/div_1_delay_40/dfo_mean.npy", allow_pickle=True)
DFO1D40_reward_std = np.load("checkpoints/single_agent/div_1_delay_40/dfo_std.npy", allow_pickle=True)

DFO1D50_reward_mean = np.load("checkpoints/single_agent/div_1_delay_50/dfo_mean.npy", allow_pickle=True)
DFO1D50_reward_std = np.load("checkpoints/single_agent/div_1_delay_50/dfo_std.npy", allow_pickle=True)
#%% Load Oracle Data
OR1_reward_mean = np.load("LP_results/div_1/Oracle/reward_mean.npy", allow_pickle=True)
OR1_reward_std = np.load("LP_results/div_1/Oracle/reward_std.npy", allow_pickle=True)
OR1_inventory_mean = np.load("LP_results/div_1/Oracle/inventory_mean.npy", allow_pickle=True)
OR1_inventory_std = np.load("LP_results/div_1/Oracle/inventory_std.npy", allow_pickle=True)
OR1_backlog_mean = np.load("LP_results/div_1/Oracle/backlog_mean.npy", allow_pickle=True)
OR1_backlog_std = np.load("LP_results/div_1/Oracle/backlog_std.npy", allow_pickle=True)
OR1_customer_backlog_mean = np.load("LP_results/div_1/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1_customer_backlog_std = np.load("LP_results/div_1/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1_profit = np.load("LP_results/div_1/Oracle/profit.npy", allow_pickle=True)

OR1N10_reward_mean = np.load("LP_results/div_1_noise_10/Oracle/reward_mean.npy", allow_pickle=True)
OR1N10_reward_std = np.load("LP_results/div_1_noise_10/Oracle/reward_std.npy", allow_pickle=True)
OR1N10_inventory_mean = np.load("LP_results/div_1_noise_10/Oracle/inventory_mean.npy", allow_pickle=True)
OR1N10_inventory_std = np.load("LP_results/div_1_noise_10/Oracle/inventory_std.npy", allow_pickle=True)
OR1N10_backlog_mean = np.load("LP_results/div_1_noise_10/Oracle/backlog_mean.npy", allow_pickle=True)
OR1N10_backlog_std = np.load("LP_results/div_1_noise_10/Oracle/backlog_std.npy", allow_pickle=True)
OR1N10_customer_backlog_mean = np.load("LP_results/div_1_noise_10/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1N10_customer_backlog_std = np.load("LP_results/div_1_noise_10/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1N10_profit = np.load("LP_results/div_1_noise_10/Oracle/profit.npy", allow_pickle=True)

OR1N20_reward_mean = np.load("LP_results/div_1_noise_20/Oracle/reward_mean.npy", allow_pickle=True)
OR1N20_reward_std = np.load("LP_results/div_1_noise_20/Oracle/reward_std.npy", allow_pickle=True)
OR1N20_inventory_mean = np.load("LP_results/div_1_noise_20/Oracle/inventory_mean.npy", allow_pickle=True)
OR1N20_inventory_std = np.load("LP_results/div_1_noise_20/Oracle/inventory_std.npy", allow_pickle=True)
OR1N20_backlog_mean = np.load("LP_results/div_1_noise_20/Oracle/backlog_mean.npy", allow_pickle=True)
OR1N20_backlog_std = np.load("LP_results/div_1_noise_20/Oracle/backlog_std.npy", allow_pickle=True)
OR1N20_customer_backlog_mean = np.load("LP_results/div_1_noise_20/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1N20_customer_backlog_std = np.load("LP_results/div_1_noise_20/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1N20_profit = np.load("LP_results/div_1_noise_20/Oracle/profit.npy", allow_pickle=True)

OR1N30_reward_mean = np.load("LP_results/div_1_noise_30/Oracle/reward_mean.npy", allow_pickle=True)
OR1N30_reward_std = np.load("LP_results/div_1_noise_30/Oracle/reward_std.npy", allow_pickle=True)
OR1N30_inventory_mean = np.load("LP_results/div_1_noise_30/Oracle/inventory_mean.npy", allow_pickle=True)
OR1N30_inventory_std = np.load("LP_results/div_1_noise_30/Oracle/inventory_std.npy", allow_pickle=True)
OR1N30_backlog_mean = np.load("LP_results/div_1_noise_30/Oracle/backlog_mean.npy", allow_pickle=True)
OR1N30_backlog_std = np.load("LP_results/div_1_noise_30/Oracle/backlog_std.npy", allow_pickle=True)
OR1N30_customer_backlog_mean = np.load("LP_results/div_1_noise_30/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1N30_customer_backlog_std = np.load("LP_results/div_1_noise_30/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1N30_profit = np.load("LP_results/div_1_noise_30/Oracle/profit.npy", allow_pickle=True)

OR1N40_reward_mean = np.load("LP_results/div_1_noise_40/Oracle/reward_mean.npy", allow_pickle=True)
OR1N40_reward_std = np.load("LP_results/div_1_noise_40/Oracle/reward_std.npy", allow_pickle=True)
OR1N40_inventory_mean = np.load("LP_results/div_1_noise_40/Oracle/inventory_mean.npy", allow_pickle=True)
OR1N40_inventory_std = np.load("LP_results/div_1_noise_40/Oracle/inventory_std.npy", allow_pickle=True)
OR1N40_backlog_mean = np.load("LP_results/div_1_noise_40/Oracle/backlog_mean.npy", allow_pickle=True)
OR1N40_backlog_std = np.load("LP_results/div_1_noise_40/Oracle/backlog_std.npy", allow_pickle=True)
OR1N40_customer_backlog_mean = np.load("LP_results/div_1_noise_40/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1N40_customer_backlog_std = np.load("LP_results/div_1_noise_40/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1N40_profit = np.load("LP_results/div_1_noise_40/Oracle/profit.npy", allow_pickle=True)

OR1N50_reward_mean = np.load("LP_results/div_1_noise_50/Oracle/reward_mean.npy", allow_pickle=True)
OR1N50_reward_std = np.load("LP_results/div_1_noise_50/Oracle/reward_std.npy", allow_pickle=True)
OR1N50_inventory_mean = np.load("LP_results/div_1_noise_50/Oracle/inventory_mean.npy", allow_pickle=True)
OR1N50_inventory_std = np.load("LP_results/div_1_noise_50/Oracle/inventory_std.npy", allow_pickle=True)
OR1N50_backlog_mean = np.load("LP_results/div_1_noise_50/Oracle/backlog_mean.npy", allow_pickle=True)
OR1N50_backlog_std = np.load("LP_results/div_1_noise_50/Oracle/backlog_std.npy", allow_pickle=True)
OR1N50_customer_backlog_mean = np.load("LP_results/div_1_noise_50/Oracle/customer_backlog_mean.npy", allow_pickle=True)
OR1N50_customer_backlog_std = np.load("LP_results/div_1_noise_50/Oracle/customer_backlog_std.npy", allow_pickle=True)
OR1N50_profit = np.load("LP_results/div_1_noise_50/Oracle/profit.npy", allow_pickle=True)


#%% Load SHLP Data
SHLP1_time = np.load("LP_results/div_1/SHLP/time.npy", allow_pickle=True)
SHLP1_reward_mean = np.load("LP_results/div_1/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1_reward_std = np.load("LP_results/div_1/SHLP/reward_std.npy", allow_pickle=True)
SHLP1_inventory_mean = np.load("LP_results/div_1/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1_inventory_std = np.load("LP_results/div_1/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1_backlog_mean = np.load("LP_results/div_1/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1_backlog_std = np.load("LP_results/div_1/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1_customer_backlog_mean = np.load("LP_results/div_1/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1_customer_backlog_std = np.load("LP_results/div_1/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1_profit = np.load("LP_results/div_1/SHLP/profit.npy", allow_pickle=True)

SHLP1N10_reward_mean = np.load("LP_results/div_1_noise_10/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1N10_reward_std = np.load("LP_results/div_1_noise_10/SHLP/reward_std.npy", allow_pickle=True)
SHLP1N10_inventory_mean = np.load("LP_results/div_1_noise_10/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1N10_inventory_std = np.load("LP_results/div_1_noise_10/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1N10_backlog_mean = np.load("LP_results/div_1_noise_10/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1N10_backlog_std = np.load("LP_results/div_1_noise_10/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1N10_customer_backlog_mean = np.load("LP_results/div_1_noise_10/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1N10_customer_backlog_std = np.load("LP_results/div_1_noise_10/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1N10_profit = np.load("LP_results/div_1_noise_10/SHLP/profit.npy", allow_pickle=True)

SHLP1N20_reward_mean = np.load("LP_results/div_1_noise_20/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1N20_reward_std = np.load("LP_results/div_1_noise_20/SHLP/reward_std.npy", allow_pickle=True)
SHLP1N20_inventory_mean = np.load("LP_results/div_1_noise_20/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1N20_inventory_std = np.load("LP_results/div_1_noise_20/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1N20_backlog_mean = np.load("LP_results/div_1_noise_20/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1N20_backlog_std = np.load("LP_results/div_1_noise_20/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1N20_customer_backlog_mean = np.load("LP_results/div_1_noise_20/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1N20_customer_backlog_std = np.load("LP_results/div_1_noise_20/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1N20_profit = np.load("LP_results/div_1_noise_20/SHLP/profit.npy", allow_pickle=True)

SHLP1N30_reward_mean = np.load("LP_results/div_1_noise_30/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1N30_reward_std = np.load("LP_results/div_1_noise_30/SHLP/reward_std.npy", allow_pickle=True)
SHLP1N30_inventory_mean = np.load("LP_results/div_1_noise_30/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1N30_inventory_std = np.load("LP_results/div_1_noise_30/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1N30_backlog_mean = np.load("LP_results/div_1_noise_30/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1N30_backlog_std = np.load("LP_results/div_1_noise_30/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1N30_customer_backlog_mean = np.load("LP_results/div_1_noise_30/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1N30_customer_backlog_std = np.load("LP_results/div_1_noise_30/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1N30_profit = np.load("LP_results/div_1_noise_30/SHLP/profit.npy", allow_pickle=True)

SHLP1N40_reward_mean = np.load("LP_results/div_1_noise_40/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1N40_reward_std = np.load("LP_results/div_1_noise_40/SHLP/reward_std.npy", allow_pickle=True)
SHLP1N40_inventory_mean = np.load("LP_results/div_1_noise_40/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1N40_inventory_std = np.load("LP_results/div_1_noise_40/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1N40_backlog_mean = np.load("LP_results/div_1_noise_40/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1N40_backlog_std = np.load("LP_results/div_1_noise_40/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1N40_customer_backlog_mean = np.load("LP_results/div_1_noise_40/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1N40_customer_backlog_std = np.load("LP_results/div_1_noise_40/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1N40_profit = np.load("LP_results/div_1_noise_40/SHLP/profit.npy", allow_pickle=True)

SHLP1N50_reward_mean = np.load("LP_results/div_1_noise_50/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1N50_reward_std = np.load("LP_results/div_1_noise_50/SHLP/reward_std.npy", allow_pickle=True)
SHLP1N50_inventory_mean = np.load("LP_results/div_1_noise_50/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1N50_inventory_std = np.load("LP_results/div_1_noise_50/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1N50_backlog_mean = np.load("LP_results/div_1_noise_50/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1N50_backlog_std = np.load("LP_results/div_1_noise_50/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1N50_customer_backlog_mean = np.load("LP_results/div_1_noise_50/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1N50_customer_backlog_std = np.load("LP_results/div_1_noise_50/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1N50_profit = np.load("LP_results/div_1_noise_50/SHLP/profit.npy", allow_pickle=True)

SHLP1D10_reward_mean = np.load("LP_results/div_1_delay_10/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1D10_reward_std = np.load("LP_results/div_1_delay_10/SHLP/reward_std.npy", allow_pickle=True)
SHLP1D10_inventory_mean = np.load("LP_results/div_1_delay_10/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1D10_inventory_std = np.load("LP_results/div_1_delay_10/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1D10_backlog_mean = np.load("LP_results/div_1_delay_10/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1D10_backlog_std = np.load("LP_results/div_1_delay_10/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1D10_customer_backlog_mean = np.load("LP_results/div_1_delay_10/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1D10_customer_backlog_std = np.load("LP_results/div_1_delay_10/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1D10_profit = np.load("LP_results/div_1_delay_10/SHLP/profit.npy", allow_pickle=True)

SHLP1D20_reward_mean = np.load("LP_results/div_1_delay_20/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1D20_reward_std = np.load("LP_results/div_1_delay_20/SHLP/reward_std.npy", allow_pickle=True)
SHLP1D20_inventory_mean = np.load("LP_results/div_1_delay_20/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1D20_inventory_std = np.load("LP_results/div_1_delay_20/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1D20_backlog_mean = np.load("LP_results/div_1_delay_20/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1D20_backlog_std = np.load("LP_results/div_1_delay_20/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1D20_customer_backlog_mean = np.load("LP_results/div_1_delay_20/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1D20_customer_backlog_std = np.load("LP_results/div_1_delay_20/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1D20_profit = np.load("LP_results/div_1_delay_20/SHLP/profit.npy", allow_pickle=True)

SHLP1D30_reward_mean = np.load("LP_results/div_1_delay_30/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1D30_reward_std = np.load("LP_results/div_1_delay_30/SHLP/reward_std.npy", allow_pickle=True)
SHLP1D30_inventory_mean = np.load("LP_results/div_1_delay_30/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1D30_inventory_std = np.load("LP_results/div_1_delay_30/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1D30_backlog_mean = np.load("LP_results/div_1_delay_30/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1D30_backlog_std = np.load("LP_results/div_1_delay_30/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1D30_customer_backlog_mean = np.load("LP_results/div_1_delay_30/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1D30_customer_backlog_std = np.load("LP_results/div_1_delay_30/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1D30_profit = np.load("LP_results/div_1_delay_30/SHLP/profit.npy", allow_pickle=True)

SHLP1D40_reward_mean = np.load("LP_results/div_1_delay_40/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1D40_reward_std = np.load("LP_results/div_1_delay_40/SHLP/reward_std.npy", allow_pickle=True)
SHLP1D40_inventory_mean = np.load("LP_results/div_1_delay_40/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1D40_inventory_std = np.load("LP_results/div_1_delay_40/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1D40_backlog_mean = np.load("LP_results/div_1_delay_40/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1D40_backlog_std = np.load("LP_results/div_1_delay_40/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1D40_customer_backlog_mean = np.load("LP_results/div_1_delay_40/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1D40_customer_backlog_std = np.load("LP_results/div_1_delay_40/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1D40_profit = np.load("LP_results/div_1_delay_40/SHLP/profit.npy", allow_pickle=True)

SHLP1D50_reward_mean = np.load("LP_results/div_1_delay_50/SHLP/reward_mean.npy", allow_pickle=True)
SHLP1D50_reward_std = np.load("LP_results/div_1_delay_50/SHLP/reward_std.npy", allow_pickle=True)
SHLP1D50_inventory_mean = np.load("LP_results/div_1_delay_50/SHLP/inventory_mean.npy", allow_pickle=True)
SHLP1D50_inventory_std = np.load("LP_results/div_1_delay_50/SHLP/inventory_std.npy", allow_pickle=True)
SHLP1D50_backlog_mean = np.load("LP_results/div_1_delay_50/SHLP/backlog_mean.npy", allow_pickle=True)
SHLP1D50_backlog_std = np.load("LP_results/div_1_delay_50/SHLP/backlog_std.npy", allow_pickle=True)
SHLP1D50_customer_backlog_mean = np.load("LP_results/div_1_delay_50/SHLP/customer_backlog_mean.npy", allow_pickle=True)
SHLP1D50_customer_backlog_std = np.load("LP_results/div_1_delay_50/SHLP/customer_backlog_std.npy", allow_pickle=True)
SHLP1D50_profit = np.load("LP_results/div_1_delay_50/SHLP/profit.npy", allow_pickle=True)

#%% Load DSHLP Data
DSHLP1_time = np.load("LP_results/div_1/DSHLP/time.npy", allow_pickle=True)
DSHLP1_reward_mean = np.load("LP_results/div_1/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1_reward_std = np.load("LP_results/div_1/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1_inventory_mean = np.load("LP_results/div_1/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1_inventory_std = np.load("LP_results/div_1/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1_backlog_mean = np.load("LP_results/div_1/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1_backlog_std = np.load("LP_results/div_1/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1_customer_backlog_mean = np.load("LP_results/div_1/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1_customer_backlog_std = np.load("LP_results/div_1/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1_profit = np.load("LP_results/div_1/DSHLP/profit.npy", allow_pickle=True)
DSHLP1_failed_tests = np.load("LP_results/div_1/DSHLP/failed_tests.npy", allow_pickle=True)

DSHLP1N10_reward_mean = np.load("LP_results/div_1_noise_10/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1N10_reward_std = np.load("LP_results/div_1_noise_10/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1N10_inventory_mean = np.load("LP_results/div_1_noise_10/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1N10_inventory_std = np.load("LP_results/div_1_noise_10/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1N10_backlog_mean = np.load("LP_results/div_1_noise_10/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1N10_backlog_std = np.load("LP_results/div_1_noise_10/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1N10_customer_backlog_mean = np.load("LP_results/div_1_noise_10/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1N10_customer_backlog_std = np.load("LP_results/div_1_noise_10/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1N10_profit = np.load("LP_results/div_1_noise_10/DSHLP/profit.npy", allow_pickle=True)

DSHLP1N20_reward_mean = np.load("LP_results/div_1_noise_20/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1N20_reward_std = np.load("LP_results/div_1_noise_20/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1N20_inventory_mean = np.load("LP_results/div_1_noise_20/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1N20_inventory_std = np.load("LP_results/div_1_noise_20/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1N20_backlog_mean = np.load("LP_results/div_1_noise_20/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1N20_backlog_std = np.load("LP_results/div_1_noise_20/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1N20_customer_backlog_mean = np.load("LP_results/div_1_noise_20/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1N20_customer_backlog_std = np.load("LP_results/div_1_noise_20/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1N20_profit = np.load("LP_results/div_1_noise_20/DSHLP/profit.npy", allow_pickle=True)

DSHLP1N30_reward_mean = np.load("LP_results/div_1_noise_30/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1N30_reward_std = np.load("LP_results/div_1_noise_30/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1N30_inventory_mean = np.load("LP_results/div_1_noise_30/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1N30_inventory_std = np.load("LP_results/div_1_noise_30/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1N30_backlog_mean = np.load("LP_results/div_1_noise_30/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1N30_backlog_std = np.load("LP_results/div_1_noise_30/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1N30_customer_backlog_mean = np.load("LP_results/div_1_noise_30/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1N30_customer_backlog_std = np.load("LP_results/div_1_noise_30/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1N30_profit = np.load("LP_results/div_1_noise_30/DSHLP/profit.npy", allow_pickle=True)

DSHLP1N40_reward_mean = np.load("LP_results/div_1_noise_40/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1N40_reward_std = np.load("LP_results/div_1_noise_40/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1N40_inventory_mean = np.load("LP_results/div_1_noise_40/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1N40_inventory_std = np.load("LP_results/div_1_noise_40/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1N40_backlog_mean = np.load("LP_results/div_1_noise_40/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1N40_backlog_std = np.load("LP_results/div_1_noise_40/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1N40_customer_backlog_mean = np.load("LP_results/div_1_noise_40/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1N40_customer_backlog_std = np.load("LP_results/div_1_noise_40/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1N40_profit = np.load("LP_results/div_1_noise_40/DSHLP/profit.npy", allow_pickle=True)

DSHLP1D10_reward_mean = np.load("LP_results/div_1_delay_10/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1D10_reward_std = np.load("LP_results/div_1_delay_10/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1D10_inventory_mean = np.load("LP_results/div_1_delay_10/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1D10_inventory_std = np.load("LP_results/div_1_delay_10/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1D10_backlog_mean = np.load("LP_results/div_1_delay_10/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1D10_backlog_std = np.load("LP_results/div_1_delay_10/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1D10_customer_backlog_mean = np.load("LP_results/div_1_delay_10/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1D10_customer_backlog_std = np.load("LP_results/div_1_delay_10/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1D10_profit = np.load("LP_results/div_1_delay_10/DSHLP/profit.npy", allow_pickle=True)

DSHLP1D20_reward_mean = np.load("LP_results/div_1_delay_20/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1D20_reward_std = np.load("LP_results/div_1_delay_20/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1D20_inventory_mean = np.load("LP_results/div_1_delay_20/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1D20_inventory_std = np.load("LP_results/div_1_delay_20/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1D20_backlog_mean = np.load("LP_results/div_1_delay_20/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1D20_backlog_std = np.load("LP_results/div_1_delay_20/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1D20_customer_backlog_mean = np.load("LP_results/div_1_delay_20/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1D20_customer_backlog_std = np.load("LP_results/div_1_delay_20/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1D20_profit = np.load("LP_results/div_1_delay_20/DSHLP/profit.npy", allow_pickle=True)

DSHLP1D30_reward_mean = np.load("LP_results/div_1_delay_30/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1D30_reward_std = np.load("LP_results/div_1_delay_30/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1D30_inventory_mean = np.load("LP_results/div_1_delay_30/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1D30_inventory_std = np.load("LP_results/div_1_delay_30/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1D30_backlog_mean = np.load("LP_results/div_1_delay_30/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1D30_backlog_std = np.load("LP_results/div_1_delay_30/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1D30_customer_backlog_mean = np.load("LP_results/div_1_delay_30/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1D30_customer_backlog_std = np.load("LP_results/div_1_delay_30/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1D30_profit = np.load("LP_results/div_1_delay_30/DSHLP/profit.npy", allow_pickle=True)

DSHLP1D40_reward_mean = np.load("LP_results/div_1_delay_40/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1D40_reward_std = np.load("LP_results/div_1_delay_40/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1D40_inventory_mean = np.load("LP_results/div_1_delay_40/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1D40_inventory_std = np.load("LP_results/div_1_delay_40/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1D40_backlog_mean = np.load("LP_results/div_1_delay_40/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1D40_backlog_std = np.load("LP_results/div_1_delay_40/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1D40_customer_backlog_mean = np.load("LP_results/div_1_delay_40/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1D40_customer_backlog_std = np.load("LP_results/div_1_delay_40/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1D40_profit = np.load("LP_results/div_1_delay_40/DSHLP/profit.npy", allow_pickle=True)

DSHLP1D50_reward_mean = np.load("LP_results/div_1_delay_50/DSHLP/reward_mean.npy", allow_pickle=True)
DSHLP1D50_reward_std = np.load("LP_results/div_1_delay_50/DSHLP/reward_std.npy", allow_pickle=True)
DSHLP1D50_inventory_mean = np.load("LP_results/div_1_delay_50/DSHLP/inventory_mean.npy", allow_pickle=True)
DSHLP1D50_inventory_std = np.load("LP_results/div_1_delay_50/DSHLP/inventory_std.npy", allow_pickle=True)
DSHLP1D50_backlog_mean = np.load("LP_results/div_1_delay_50/DSHLP/backlog_mean.npy", allow_pickle=True)
DSHLP1D50_backlog_std = np.load("LP_results/div_1_delay_50/DSHLP/backlog_std.npy", allow_pickle=True)
DSHLP1D50_customer_backlog_mean = np.load("LP_results/div_1_delay_50/DSHLP/customer_backlog_mean.npy", allow_pickle=True)
DSHLP1D50_customer_backlog_std = np.load("LP_results/div_1_delay_50/DSHLP/customer_backlog_std.npy", allow_pickle=True)
DSHLP1D50_profit = np.load("LP_results/div_1_delay_50/DSHLP/profit.npy", allow_pickle=True)

ORDSHLP_reward_mean = np.load("LP_results/div_1/Oracle_DSHLP/reward_mean.npy", allow_pickle=True)
ORDSHLPN10_reward_mean = np.load("LP_results/div_1/Oracle_DSHLP_n10/reward_mean.npy", allow_pickle=True)
ORDSHLPN20_reward_mean = np.load("LP_results/div_1/Oracle_DSHLP_n20/reward_mean.npy", allow_pickle=True)
ORDSHLPN30_reward_mean = np.load("LP_results/div_1/Oracle_DSHLP_n30/reward_mean.npy", allow_pickle=True)
ORDSHLPN40_reward_mean = np.load("LP_results/div_1/Oracle_DSHLP_n40/reward_mean.npy", allow_pickle=True)
#%% Plots
colour_dict = {}
colour_dict['OR'] = 'k'
colour_dict['SHLP'] = 'tab:red'
colour_dict['DSHLP'] = 'tab:orange'
colour_dict['DecLP'] = 'yellow'
colour_dict['S'] = 'tab:blue'
colour_dict['MA'] = 'salmon'
colour_dict['MAS'] = 'tab:cyan'
colour_dict['CC'] = 'tab:green'
colour_dict['DFO'] = 'indigo'
colour_dict['MAI'] = 'indigo'
colour_dict['MASI'] = 'tab:purple'
colour_dict['CCI'] = 'tab:olive'
#%% Div1 profit
OR1_profit_mean = np.mean(np.cumsum(OR1_profit, axis=1), axis=0)
OR1_profit_std = np.std(np.cumsum(OR1_profit, axis=1), axis=0)

SHLP1_profit_mean = np.mean(np.cumsum(SHLP1_profit, axis=1), axis=0)
SHLP1_profit_std = np.std(np.cumsum(SHLP1_profit, axis=1), axis=0)

DSHLP1_profit_mean = np.mean(np.cumsum(DSHLP1_profit, axis=1), axis=0)
DSHLP1_profit_std = np.std(np.cumsum(DSHLP1_profit, axis=1), axis=0)

S1_profit_mean = np.mean(np.cumsum(S1_profit, axis=1), axis=0)
S1_profit_std = np.std(np.cumsum(S1_profit, axis=1), axis=0)

MA1_profit_mean = np.mean(np.cumsum(MA1_profit, axis=1), axis=0)
MA1_profit_std = np.std(np.cumsum(MA1_profit, axis=1), axis=0)

MAS1_profit_mean = np.mean(np.cumsum(MAS1_profit, axis=1), axis=0)
MAS1_profit_std = np.std(np.cumsum(MAS1_profit, axis=1), axis=0)

MA1I_profit_mean = np.mean(np.cumsum(MAI1_profit, axis=1), axis=0)
MA1I_profit_std = np.std(np.cumsum(MAI1_profit, axis=1), axis=0)

MASI1_profit_mean = np.mean(np.cumsum(MASI1_profit, axis=1), axis=0)
MASI1_profit_std = np.std(np.cumsum(MASI1_profit, axis=1), axis=0)

CC1_profit_mean = np.mean(np.cumsum(CC1_profit, axis=1), axis=0)
CC1_profit_std = np.std(np.cumsum(CC1_profit, axis=1), axis=0)

CC1I_profit_mean = np.mean(np.cumsum(CCI1_profit, axis=1), axis=0)
CC1I_profit_std = np.std(np.cumsum(CCI1_profit, axis=1), axis=0)

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.plot(OR1_profit_mean, label='Oracle', lw=2, color=colour_dict['OR'])
#axs.fill_between(np.arange(0, 30), OR1_profit_mean-OR1_profit_std, OR1_profit_mean+OR1_profit_std, alpha=0.3)
axs.plot(SHLP1_profit_mean, label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(DSHLP1_profit_mean, label='DSHLP', lw=2, color=colour_dict['DSHLP'])
axs.plot(S1_profit_mean, label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(MA1_profit_mean, label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(MAS1_profit_mean, label='IPPO shared network', lw=2, color=colour_dict['MAS'])
#axs.plot(MA1I_profit_mean, label='IPPO Independent', lw=2, color=colour_dict['MAI'])
#axs.plot(MA1I_profit_mean, label='IPPO shared network Independent', lw=2, color=colour_dict['MASI'])
axs.plot(CC1_profit_mean, label='MAPPO', lw=2, color=colour_dict['CC'])
#axs.plot(CC1I_profit_mean, label='MAPPO Independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Cumulative Profit")
axs.set_xlabel("Period")
axs.legend()
axs.set_xlim(0, 29)
plt.savefig('report_figures/div1_profit.png', dpi=200, bbox_inches='tight')
plt.show()


#%% Learning curves

p = 100
# Unpack values from each iteration
S1_rewards = np.hstack([i['hist_stats']['episode_reward'] for i in S1_results])
S1_Mean_rewards = np.array([np.mean(S1_rewards[i - p:i + 1]) if i >= p else np.mean(S1_rewards[:i + 1])
                         for i, _ in enumerate(S1_rewards)])
S1_Std_rewards = np.array([np.std(S1_rewards[i - p:i + 1]) if i >= p else np.std(S1_rewards[:i + 1])
                        for i, _ in enumerate(S1_rewards)])

MA1_rewards = np.hstack([i['episode_reward'] for i in MA1_results])
MA1_Mean_rewards = np.array([np.mean(MA1_rewards[i - p:i + 1]) if i >= p else np.mean(MA1_rewards[:i + 1])
                         for i, _ in enumerate(MA1_rewards)])
MA1_Std_rewards = np.array([np.std(MA1_rewards[i - p:i + 1]) if i >= p else np.std(MA1_rewards[:i + 1])
                        for i, _ in enumerate(MA1_rewards)])

MAS1_rewards = np.hstack([i['episode_reward'] for i in MAS1_results])
MAS1_Mean_rewards = np.array([np.mean(MAS1_rewards[i - p:i + 1]) if i >= p else np.mean(MAS1_rewards[:i + 1])
                         for i, _ in enumerate(MAS1_rewards)])
MAS1_Std_rewards = np.array([np.std(MAS1_rewards[i - p:i + 1]) if i >= p else np.std(MAS1_rewards[:i + 1])
                        for i, _ in enumerate(MAS1_rewards)])

MAI1_rewards = np.hstack([i['episode_reward'] for i in MAI1_results])
MAI1_Mean_rewards = np.array([np.mean(MAI1_rewards[i - p:i + 1]) if i >= p else np.mean(MAI1_rewards[:i + 1])
                         for i, _ in enumerate(MAI1_rewards)])
MAI1_Std_rewards = np.array([np.std(MAI1_rewards[i - p:i + 1]) if i >= p else np.std(MAI1_rewards[:i + 1])
                        for i, _ in enumerate(MAI1_rewards)])

MASI1_rewards = np.hstack([i['episode_reward'] for i in MASI1_results])
MASI1_Mean_rewards = np.array([np.mean(MASI1_rewards[i - p:i + 1]) if i >= p else np.mean(MASI1_rewards[:i + 1])
                         for i, _ in enumerate(MASI1_rewards)])
MASI1_Std_rewards = np.array([np.std(MASI1_rewards[i - p:i + 1]) if i >= p else np.std(MASI1_rewards[:i + 1])
                        for i, _ in enumerate(MASI1_rewards)])


CC1_rewards = np.hstack([i['hist_stats']['episode_reward'] for i in CC1_results])
CC1_Mean_rewards = np.array([np.mean(CC1_rewards[i - p:i + 1]) if i >= p else np.mean(CC1_rewards[:i + 1])
                         for i, _ in enumerate(CC1_rewards)])
CC1_Std_rewards = np.array([np.std(CC1_rewards[i - p:i + 1]) if i >= p else np.std(CC1_rewards[:i + 1])
                        for i, _ in enumerate(CC1_rewards)])


CC1I_rewards = np.hstack([i['hist_stats']['episode_reward'] for i in CCI1_results])
CC1I_Mean_rewards = np.array([np.mean(CC1I_rewards[i - p:i + 1]) if i >= p else np.mean(CC1I_rewards[:i + 1])
                         for i, _ in enumerate(CC1I_rewards)])
CC1I_Std_rewards = np.array([np.std(CC1I_rewards[i - p:i + 1]) if i >= p else np.std(CC1I_rewards[:i + 1])
                        for i, _ in enumerate(CC1I_rewards)])


#%% MA Learning Curve plots
fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.fill_between(np.arange(len(MA1_Mean_rewards)),
                 MA1_Mean_rewards - MA1_Std_rewards,
                 MA1_Mean_rewards + MA1_Std_rewards,
                 alpha=0.1)
axs.plot(MA1_Mean_rewards, label='Mean IPPO rewards', lw=2)

axs.fill_between(np.arange(len(MAS1_Mean_rewards)),
                 MAS1_Mean_rewards - MAS1_Std_rewards,
                 MAS1_Mean_rewards + MAS1_Std_rewards,
                 alpha=0.1)
axs.plot(MAS1_Mean_rewards, label='Mean IPPO shared network rewards', lw=2)

axs.fill_between(np.arange(len(CC1_Mean_rewards)),
                 CC1_Mean_rewards - CC1_Std_rewards,
                 CC1_Mean_rewards + CC1_Std_rewards,
                 alpha=0.1)
axs.plot(CC1_Mean_rewards, label='Mean MAPPO rewards', lw=2)

# Plot DSHLP rewards
axs.fill_between(np.arange(len(CC1_Mean_rewards)),
                np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean - DSHLP1_reward_std),
                np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean + DSHLP1_reward_std),
                alpha=0.3)
axs.plot(np.arange(len(CC1_Mean_rewards)), np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean), label='Mean DSHLP rewards', lw=2)


axs.set_ylabel("Rewards")
axs.set_xlabel("Episode")
axs.legend()
axs.set_xlim(0, 50000)
#axs.set_ylim(250, 550)
plt.savefig('report_figures/MA_learning_curves_div1.png', dpi=200, bbox_inches='tight')
plt.show()

#%% MA I Learning Curve plots
fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.fill_between(np.arange(len(MAI1_Mean_rewards)),
                 MAI1_Mean_rewards - MAI1_Std_rewards,
                 MAI1_Mean_rewards + MAI1_Std_rewards,
                 alpha=0.1)
axs.plot(MAI1_Mean_rewards, label='Mean IPPO rewards', lw=2)

axs.fill_between(np.arange(len(MASI1_Mean_rewards)),
                 MASI1_Mean_rewards - MASI1_Std_rewards,
                 MASI1_Mean_rewards + MASI1_Std_rewards,
                 alpha=0.1)
axs.plot(MASI1_Mean_rewards, label='Mean IPPO shared network rewards', lw=2)

axs.fill_between(np.arange(len(CC1I_Mean_rewards)),
                 CC1I_Mean_rewards - CC1I_Std_rewards,
                 CC1I_Mean_rewards + CC1I_Std_rewards,
                 alpha=0.1)
axs.plot(CC1I_Mean_rewards, label='Mean MAPPO rewards', lw=2)

# Plot DSHLP rewards
axs.fill_between(np.arange(len(CC1_Mean_rewards)),
                np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean - DSHLP1_reward_std),
                np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean + DSHLP1_reward_std),
                alpha=0.3)
axs.plot(np.arange(len(CC1_Mean_rewards)), np.ones(len(CC1_Mean_rewards)) * (DSHLP1_reward_mean), label='Mean DSHLP rewards', lw=2)



axs.set_ylabel("Rewards")
axs.set_xlabel("Episode")
axs.legend()
axs.set_xlim(0, 50000)
#axs.set_ylim(250, 550)
plt.savefig('report_figures/MA_learning_curves_independent_div1.png', dpi=200, bbox_inches='tight')
plt.show()


#%% Demand Noise Plots
demand_noise = [0, 10, 20, 30, 40, 50]
OR_N_mean = np.array([OR1_reward_mean, OR1N10_reward_mean, OR1N20_reward_mean, OR1N30_reward_mean, OR1N40_reward_mean, OR1N50_reward_mean])
OR_N_std = np.array([OR1_reward_std, OR1N10_reward_std, OR1N20_reward_std, OR1N30_reward_std, OR1N40_reward_std, OR1N50_reward_std])

DFO_N_mean = np.array([DFO1_reward_mean, DFO1N10_reward_mean, DFO1N20_reward_mean, DFO1N30_reward_mean, DFO1N40_reward_mean, DFO1N50_reward_mean])
DFO_N_std = np.array([DFO1_reward_std, DFO1N10_reward_std, DFO1N20_reward_std, DFO1N30_reward_std, DFO1N40_reward_std, DFO1N50_reward_std])

SHLP_N_mean = np.array([SHLP1_reward_mean, SHLP1N10_reward_mean, SHLP1N20_reward_mean, SHLP1N30_reward_mean, SHLP1N40_reward_mean, SHLP1N50_reward_mean])
SHLP_N_std = np.array([SHLP1_reward_std, SHLP1N10_reward_std, SHLP1N20_reward_std, SHLP1N30_reward_std, SHLP1N40_reward_std, SHLP1N50_reward_std])

DSHLP_N_mean = np.array([DSHLP1_reward_mean, DSHLP1N10_reward_mean, DSHLP1N20_reward_mean, DSHLP1N30_reward_mean, DSHLP1N40_reward_mean, 0])
DSHLP_N_std = np.array([DSHLP1_reward_std, DSHLP1N10_reward_std, DSHLP1N20_reward_std, DSHLP1N30_reward_std, DSHLP1N40_reward_std, 0])

ORDSHLP_N_mean = np.array([ORDSHLP_reward_mean, ORDSHLPN10_reward_mean, ORDSHLPN20_reward_mean, ORDSHLPN30_reward_mean, ORDSHLPN40_reward_mean, 1])

S_N_mean = np.array([S1_reward_mean, S1N10_reward_mean, S1N20_reward_mean, S1N30_reward_mean, S1N40_reward_mean, S1N50_reward_mean])
S_N_std = np.array([S1_reward_std, S1N10_reward_std, S1N20_reward_std, S1N30_reward_std, S1N40_reward_std, S1N50_reward_std])

NS_N_mean = np.array([S1_reward_mean, NS1N10_reward_mean, NS1N20_reward_mean, NS1N30_reward_mean, NS1N40_reward_mean, NS1N50_reward_mean])
NS_N_std = np.array([S1_reward_std, NS1N10_reward_std, NS1N20_reward_std, NS1N30_reward_std, NS1N40_reward_std, NS1N50_reward_std])

MA_N_mean = np.array([MA1_reward_mean, MA1N10_reward_mean, MA1N20_reward_mean, MA1N30_reward_mean, MA1N40_reward_mean, MA1N50_reward_mean])
MA_N_std = np.array([MA1_reward_std, MA1N10_reward_std, MA1N20_reward_std, MA1N30_reward_std, MA1N40_reward_std, MA1N50_reward_std])

NMA_N_mean = np.array([MA1_reward_mean, NMA1N10_reward_mean, NMA1N20_reward_mean, NMA1N30_reward_mean, NMA1N40_reward_mean, NMA1N50_reward_mean])
NMA_N_std = np.array([MA1_reward_std, NMA1N10_reward_std, NMA1N20_reward_std, NMA1N30_reward_std, NMA1N40_reward_std, NMA1N50_reward_std])

MAI_N_mean = np.array([MAI1_reward_mean, MAI1N10_reward_mean, MAI1N20_reward_mean, MAI1N30_reward_mean, MAI1N40_reward_mean, MAI1N50_reward_mean])
MAI_N_std = np.array([MAI1_reward_std, MAI1N10_reward_std, MAI1N20_reward_std, MAI1N30_reward_std, MAI1N40_reward_std, MAI1N50_reward_std])

MAS_N_mean = np.array([MAS1_reward_mean, MAS1N10_reward_mean, MAS1N20_reward_mean, MAS1N30_reward_mean, MAS1N40_reward_mean, MAS1N50_reward_mean])
MAS_N_std = np.array([MAS1_reward_std, MAS1N10_reward_std, MAS1N20_reward_std, MAS1N30_reward_std, MAS1N40_reward_std, MAS1N50_reward_std])

NMAS_N_mean = np.array([MAS1_reward_mean, NMAS1N10_reward_mean, NMAS1N20_reward_mean, NMAS1N30_reward_mean, NMAS1N40_reward_mean, NMAS1N50_reward_mean])
NMAS_N_std = np.array([MAS1_reward_std, NMAS1N10_reward_std, NMAS1N20_reward_std, NMAS1N30_reward_std, NMAS1N40_reward_std, NMAS1N50_reward_std])

MASI_N_mean = np.array([MASI1_reward_mean, MASI1N10_reward_mean, MASI1N20_reward_mean, MASI1N30_reward_mean, MASI1N40_reward_mean, MASI1N50_reward_mean])
MASI_N_std = np.array([MASI1_reward_std, MASI1N10_reward_std, MASI1N20_reward_std, MASI1N30_reward_std, MASI1N40_reward_std, MASI1N50_reward_std])

CC_N_mean = np.array([CC1_reward_mean, CC1N10_reward_mean, CC1N20_reward_mean, CC1N30_reward_mean, CC1N40_reward_mean, CC1N50_reward_mean])
CC_N_std = np.array([CC1_reward_std, CC1N10_reward_std, CC1N20_reward_std, CC1N30_reward_std, CC1N40_reward_std, CC1N50_reward_std])

NCC_N_mean = np.array([CC1_reward_mean, NCC1N10_reward_mean, NCC1N20_reward_mean, NCC1N30_reward_mean, NCC1N40_reward_mean, NCC1N50_reward_mean])
NCC_N_std = np.array([CC1_reward_std, NCC1N10_reward_std, NCC1N20_reward_std, NCC1N30_reward_std, NCC1N40_reward_std, NCC1N50_reward_std])

CCI_N_mean = np.array([CCI1_reward_mean, CCI1N10_reward_mean, CCI1N20_reward_mean, CCI1N30_reward_mean, CCI1N40_reward_mean, CCI1N50_reward_mean])
CCI_N_std = np.array([CCI1_reward_std, CCI1N10_reward_std, CCI1N20_reward_std, CCI1N30_reward_std, CCI1N40_reward_std, CCI1N50_reward_std])

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.plot(demand_noise, OR_N_mean, label='Oracle', lw=2, color=colour_dict['OR'])
axs.plot(demand_noise, SHLP_N_mean, label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(demand_noise, DSHLP_N_mean, label='DSHLP', lw=2, color=colour_dict['DSHLP'])
#axs.plot(demand_noise, DFO_N_mean, label='DFO', lw=2, color=colour_dict['DFO'])
axs.plot(demand_noise, S_N_mean, label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(demand_noise, NS_N_mean, label='Single Agent noise trained', lw=2, color=colour_dict['S'], linestyle=":")
axs.plot(demand_noise, MA_N_mean, label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(demand_noise, NMA_N_mean, label='IPPO noise trained', lw=2, color=colour_dict['MA'], linestyle=":")
#axs.plot(demand_noise, MAI_N_mean, label='IPPO independent', lw=2, color=colour_dict['MAI'])
axs.plot(demand_noise, MAS_N_mean, label='IPPO shared network', lw=2, color=colour_dict['MAS'])
axs.plot(demand_noise, NMAS_N_mean, label='IPPO shared network noise trained', lw=2, color=colour_dict['MAS'], linestyle=":")
#axs.plot(demand_noise, MASI_N_mean, label='IPPO shared network independent', lw=2, color=colour_dict['MASI'])
axs.plot(demand_noise, CC_N_mean, label='MAPPO', lw=2, color=colour_dict['CC'])
axs.plot(demand_noise, NCC_N_mean, label='MAPPO noise trained', lw=2, color=colour_dict['CC'], linestyle=":")
#axs.plot(demand_noise, CCI_N_mean, label='MAPPO independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Reward")
axs.set_xlabel("Demand Noise (%)")
axs.legend()
axs.set_xlim(0, 40)
plt.savefig('report_figures/demand_noise_div1.png', dpi=200, bbox_inches='tight')
plt.show()

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

#axs.plot(demand_noise, OR_N_mean, label='Oracle', lw=2, color=colour_dict['OR'])
#axs.fill_between(demand_noise, OR_N_mean-OR_N_std, OR_N_mean+OR_N_std, alpha=0.3)
axs.plot(demand_noise, SHLP_N_mean/OR_N_mean, label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(demand_noise, DSHLP_N_mean/ORDSHLP_N_mean, label='DSHLP', lw=2, color=colour_dict['DSHLP'])
#axs.plot(demand_noise, DFO_N_mean/OR_N_mean, label='DFO', lw=2, color=colour_dict['DFO'])
axs.plot(demand_noise, S_N_mean/OR_N_mean, label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(demand_noise, NS_N_mean/OR_N_mean, label='Single Agent noise trained', lw=2, color=colour_dict['S'], linestyle=":")
axs.plot(demand_noise, MA_N_mean/OR_N_mean, label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(demand_noise, NMA_N_mean/OR_N_mean, label='IPPO noise trained', lw=2, color=colour_dict['MA'], linestyle=":")
#axs.plot(demand_noise, MAI_N_mean/OR_N_mean, label='IPPO independent', lw=2, color=colour_dict['MAI'])
axs.plot(demand_noise, MAS_N_mean/OR_N_mean, label='IPPO shared network', lw=2, color=colour_dict['MAS'])
axs.plot(demand_noise, NMAS_N_mean/OR_N_mean, label='IPPO shared network noise trained', lw=2, color=colour_dict['MAS'], linestyle=":")
#axs.plot(demand_noise, MASI_N_mean/OR_N_mean, label='IPPO shared network independent', lw=2, color=colour_dict['MASI'])
axs.plot(demand_noise, CC_N_mean/OR_N_mean, label='MAPPO', lw=2, color=colour_dict['CC'])
axs.plot(demand_noise, NCC_N_mean/OR_N_mean, label='MAPPO noise trained', lw=2, color=colour_dict['CC'], linestyle=":")
#axs.plot(demand_noise, CCI_N_mean/OR_N_mean, label='MAPPO independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Performance relative to Oracle")
axs.set_xlabel("Demand Noise (%)")
axs.legend()
axs.set_xlim(0, 40)
plt.savefig('report_figures/demand_noise_relative_div1.png', dpi=200, bbox_inches='tight')
plt.show()

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.plot(demand_noise, (SHLP_N_mean/OR_N_mean)/(SHLP_N_mean[0]/OR_N_mean[0]), label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(demand_noise, (DSHLP_N_mean/ORDSHLP_N_mean)/(DSHLP_N_mean[0]/ORDSHLP_N_mean[0]), label='DSHLP', lw=2, color=colour_dict['DSHLP'])
#axs.plot(demand_noise, (DFO_N_mean/OR_N_mean)/(DFO_N_mean[0]/OR_N_mean[0]), label='DFO', lw=2, color=colour_dict['DFO'])
axs.plot(demand_noise, (S_N_mean/OR_N_mean)/(S_N_mean[0]/OR_N_mean[0]), label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(demand_noise, (NS_N_mean/OR_N_mean)/(NS_N_mean[0]/OR_N_mean[0]), label='Single Agent noise trained', lw=2, color=colour_dict['S'], linestyle=":")
axs.plot(demand_noise, (MA_N_mean/OR_N_mean)/(MA_N_mean[0]/OR_N_mean[0]), label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(demand_noise, (NMA_N_mean/OR_N_mean)/(NMA_N_mean[0]/OR_N_mean[0]), label='IPPO noise trained', lw=2, color=colour_dict['MA'], linestyle=":")
#axs.plot(demand_noise, (MAI_N_mean/OR_N_mean)/(MAI_N_mean[0]/OR_N_mean[0]), label='IPPO independent', lw=2, color=colour_dict['MAI'])
axs.plot(demand_noise, (MAS_N_mean/OR_N_mean)/(MAS_N_mean[0]/OR_N_mean[0]), label='IPPO shared network', lw=2, color=colour_dict['MAS'])
axs.plot(demand_noise, (NMAS_N_mean/OR_N_mean)/(NMAS_N_mean[0]/OR_N_mean[0]), label='IPPO shared network noise trained', lw=2, color=colour_dict['MAS'], linestyle=":")
#axs.plot(demand_noise, (MASI_N_mean/OR_N_mean)/(MASI_N_mean[0]/OR_N_mean[0]), label='IPPO shared network independent', lw=2, color=colour_dict['MASI'])
axs.plot(demand_noise, (CC_N_mean/OR_N_mean)/(CC_N_mean[0]/OR_N_mean[0]), label='MAPPO', lw=2, color=colour_dict['CC'])
axs.plot(demand_noise, (NCC_N_mean/OR_N_mean)/(NCC_N_mean[0]/OR_N_mean[0]), label='MAPPO noise trained', lw=2, color=colour_dict['CC'], linestyle=":")
#axs.plot(demand_noise, (CCI_N_mean/OR_N_mean)/(CCI_N_mean[0]/OR_N_mean[0]), label='MAPPO independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Performance Change")
axs.set_xlabel("Demand Noise (%)")
axs.legend()
axs.set_xlim(0, 40)
plt.savefig('report_figures/demand_noise_relative_change_div1.png', dpi=200, bbox_inches='tight')
plt.show()

#%% Delay Plots
delay_noise = [0, 10, 20, 30, 40, 50]

SHLP_D_mean = np.array([SHLP1_reward_mean, SHLP1D10_reward_mean, SHLP1D20_reward_mean, SHLP1D30_reward_mean, SHLP1D40_reward_mean, SHLP1D50_reward_mean])
SHLP_D_std = np.array([SHLP1_reward_std, SHLP1D10_reward_std, SHLP1D20_reward_std, SHLP1D30_reward_std, SHLP1D40_reward_std, SHLP1D50_reward_std])

DSHLP_D_mean = np.array([DSHLP1_reward_mean, DSHLP1D10_reward_mean, DSHLP1D20_reward_mean, DSHLP1D30_reward_mean, DSHLP1D40_reward_mean, DSHLP1D50_reward_mean])
DSHLP_D_std = np.array([DSHLP1_reward_std, DSHLP1D10_reward_std, DSHLP1D20_reward_std, DSHLP1D30_reward_std, DSHLP1D40_reward_std, DSHLP1D50_reward_std])

DFO_D_mean = np.array([DFO1_reward_mean, DFO1D10_reward_mean, DFO1D20_reward_mean, DFO1D30_reward_mean, DFO1D40_reward_mean, DFO1D50_reward_mean])
DFO_D_std = np.array([DFO1_reward_std, DFO1D10_reward_std, DFO1D20_reward_std, DFO1D30_reward_std, DFO1D40_reward_std, DFO1D50_reward_std])

S_D_mean = np.array([S1_reward_mean, S1D10_reward_mean, S1D20_reward_mean, S1D30_reward_mean, S1D40_reward_mean, S1D50_reward_mean])
S_D_std = np.array([S1_reward_std, S1D10_reward_std, S1D20_reward_std, S1D30_reward_std, S1D40_reward_std, S1D50_reward_std])

NS_D_mean = np.array([S1_reward_mean, NS1D10_reward_mean, NS1D20_reward_mean, NS1D30_reward_mean, NS1D40_reward_mean, NS1D50_reward_mean])
NS_D_std = np.array([S1_reward_std, NS1D10_reward_std, NS1D20_reward_std, NS1D30_reward_std, NS1D40_reward_std, NS1D50_reward_std])

MA_D_mean = np.array([MA1_reward_mean, MA1D10_reward_mean, MA1D20_reward_mean, MA1D30_reward_mean, MA1D40_reward_mean, MA1D50_reward_mean])
MA_D_std = np.array([MA1_reward_std, MA1D10_reward_std, MA1D20_reward_std, MA1D30_reward_std, MA1D40_reward_std, MA1D50_reward_std])

NMA_D_mean = np.array([MA1_reward_mean, NMA1D10_reward_mean, NMA1D20_reward_mean, NMA1D30_reward_mean, NMA1D40_reward_mean, NMA1D50_reward_mean])
NMA_D_std = np.array([MA1_reward_std, NMA1D10_reward_std, NMA1D20_reward_std, NMA1D30_reward_std, NMA1D40_reward_std, NMA1D50_reward_std])

MAI_D_mean = np.array([MAI1_reward_mean, MAI1D10_reward_mean, MAI1D20_reward_mean, MAI1D30_reward_mean, MAI1D40_reward_mean, MAI1D50_reward_mean])
MAI_D_std = np.array([MAI1_reward_std, MAI1D10_reward_std, MAI1D20_reward_std, MAI1D30_reward_std, MAI1D40_reward_std, MAI1D50_reward_std])

MAS_D_mean = np.array([MAS1_reward_mean, MAS1D10_reward_mean, MAS1D20_reward_mean, MAS1D30_reward_mean, MAS1D40_reward_mean, MAS1D50_reward_mean])
MAS_D_std = np.array([MAS1_reward_std, MAS1D10_reward_std, MAS1D20_reward_std, MAS1D30_reward_std, MAS1D40_reward_std, MAS1D50_reward_std])

NMAS_D_mean = np.array([MAS1_reward_mean, NMAS1D10_reward_mean, NMAS1D20_reward_mean, NMAS1D30_reward_mean, NMAS1D40_reward_mean, NMAS1D50_reward_mean])
NMAS_D_std = np.array([MAS1_reward_std, NMAS1D10_reward_std, NMAS1D20_reward_std, NMAS1D30_reward_std, NMAS1D40_reward_std, NMAS1D50_reward_std])

MASI_D_mean = np.array([MASI1_reward_mean, MASI1D10_reward_mean, MASI1D20_reward_mean, MASI1D30_reward_mean, MASI1D40_reward_mean, MASI1D50_reward_mean])
MASI_D_std = np.array([MASI1_reward_std, MASI1D10_reward_std, MASI1D20_reward_std, MASI1D30_reward_std, MASI1D40_reward_std, MASI1D50_reward_std])

CC_D_mean = np.array([CC1_reward_mean, CC1D10_reward_mean, CC1D20_reward_mean, CC1D30_reward_mean, CC1D40_reward_mean, CC1D50_reward_mean])
CC_D_std = np.array([CC1_reward_std, CC1D10_reward_std, CC1D20_reward_std, CC1D30_reward_std, CC1D40_reward_std, CC1D50_reward_std])

NCC_D_mean = np.array([CC1_reward_mean, NCC1D10_reward_mean, NCC1D20_reward_mean, NCC1D30_reward_mean, NCC1D40_reward_mean, NCC1D50_reward_mean])
NCC_D_std = np.array([CC1_reward_std, NCC1D10_reward_std, NCC1D20_reward_std, NCC1D30_reward_std, NCC1D40_reward_std, NCC1D50_reward_std])

CCI_D_mean = np.array([CCI1_reward_mean, CCI1D10_reward_mean, CCI1D20_reward_mean, CCI1D30_reward_mean, CCI1D40_reward_mean, CCI1D50_reward_mean])
CCI_D_std = np.array([CCI1_reward_std, CCI1D10_reward_std, CCI1D20_reward_std, CCI1D30_reward_std, CCI1D40_reward_std, CCI1D50_reward_std])

ACC_D_mean = np.array([ACC1_reward_mean, ACC1D10_reward_mean, ACC1D20_reward_mean, ACC1D30_reward_mean, ACC1D40_reward_mean, ACC1D50_reward_mean])
ACC_D_std = np.array([ACC1_reward_std, ACC1D10_reward_std, ACC1D20_reward_std, ACC1D30_reward_std, ACC1D40_reward_std, ACC1D50_reward_std])

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.plot(delay_noise, SHLP_D_mean, label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(delay_noise, DSHLP_D_mean, label='DSHLP', lw=2, color=colour_dict['DSHLP'])
#axs.plot(delay_noise, DFO_D_mean, label='DFO', lw=2, color=colour_dict['DFO'])
axs.plot(delay_noise, S_D_mean, label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(delay_noise, NS_D_mean, label='Single Agent noise trained', lw=2, color=colour_dict['S'], linestyle=":")
#axs.plot(delay_noise, DecLP_D_mean, label='Decentralised SHILP', lw=2, color=colour_dict['DecLP'])
axs.plot(delay_noise, MA_D_mean, label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(delay_noise, NMA_D_mean, label='IPPO noise trained', lw=2, color=colour_dict['MA'], linestyle=":")
#axs.plot(delay_noise, MAI_D_mean, label='IPPO independent', lw=2, color=colour_dict['MAI'])
axs.plot(delay_noise, MAS_D_mean, label='IPPO shared network', lw=2, color=colour_dict['MAS'])
axs.plot(delay_noise, NMAS_D_mean, label='IPPO shared network noise trained', lw=2, color=colour_dict['MAS'], linestyle=":")
#axs.plot(delay_noise, MASI_D_mean, label='IPPO shared network independent', lw=2, color=colour_dict['MASI'])
axs.plot(delay_noise, CC_D_mean, label='MAPPO', lw=2, color=colour_dict['CC'])
axs.plot(delay_noise, NCC_D_mean, label='MAPPO noise trained', lw=2, color=colour_dict['CC'], linestyle=":")
#axs.plot(delay_noise, ACC_D_mean, label='Alt MAPPO', lw=2, color="k")
#axs.plot(delay_noise, CCI_D_mean, label='MAPPO independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Reward")
axs.set_xlabel("Delay Noise (%)")
axs.legend()
axs.set_xlim(0, 50)
plt.savefig('report_figures/delay_noise_div.png', dpi=200, bbox_inches='tight')
plt.show()

fig, axs = plt.subplots(1, 1, figsize=(12, 6), facecolor='w', edgecolor='k')
fig.subplots_adjust(hspace=0.1, wspace=.3)

axs.plot(delay_noise, SHLP_D_mean/SHLP1_reward_mean, label='SHLP', lw=2, color=colour_dict['SHLP'])
axs.plot(delay_noise, DSHLP_D_mean/DSHLP1_reward_mean, label='DSHLP', lw=2, color=colour_dict['DSHLP'])
#axs.plot(delay_noise, DFO_D_mean/DFO4_reward_mean, label='DFO', lw=2, color=colour_dict['DFO'])
axs.plot(delay_noise, S_D_mean/S1_reward_mean, label='Single Agent', lw=2, color=colour_dict['S'])
axs.plot(delay_noise, NS_D_mean/S1_reward_mean, label='Single Agent noise trained', lw=2, color=colour_dict['S'], linestyle=":")
#axs.plot(delay_noise, DecLP_D_mean/DecLP4_reward_mean, label='Decentralised SHILP', lw=2, color=colour_dict['DecLP'])
axs.plot(delay_noise, MA_D_mean/MA1_reward_mean, label='IPPO', lw=2, color=colour_dict['MA'])
axs.plot(delay_noise, NMA_D_mean/MA1_reward_mean, label='IPPO noise trained', lw=2, color=colour_dict['MA'], linestyle=":")
#axs.plot(delay_noise, MAI_D_mean/MAI1_reward_mean, label='IPPO independent', lw=2, color=colour_dict['MAI'])
axs.plot(delay_noise, MAS_D_mean/MAS1_reward_mean, label='IPPO shared network', lw=2, color=colour_dict['MAS'])
axs.plot(delay_noise, NMAS_D_mean/MAS1_reward_mean, label='IPPO shared network noise trained', lw=2, color=colour_dict['MAS'], linestyle=":")
#axs.plot(delay_noise, MASI_D_mean/MASI1_reward_mean, label='IPPO shared network independent', lw=2, color=colour_dict['MASI'])
axs.plot(delay_noise, CC_D_mean/CC1_reward_mean, label='MAPPO', lw=2, color=colour_dict['CC'])
axs.plot(delay_noise, NCC_D_mean/CC1_reward_mean, label='MAPPO noise trained', lw=2, color=colour_dict['CC'], linestyle=":")
#axs.plot(delay_noise, ACC_D_mean/ACC1_reward_mean, label='Alt MAPPO', lw=2, color="k")
#axs.plot(delay_noise, CCI_D_mean/CCI1_reward_mean, label='MAPPO independent', lw=2, color=colour_dict['CCI'])
axs.set_ylabel("Performance Change")
axs.set_xlabel("Delay Noise (%)")
axs.legend()
axs.set_xlim(0, 50)
plt.savefig('report_figures/delay_noise_change_div.png', dpi=200, bbox_inches='tight')
plt.show()


#%% Printing Results
print('Div 1')
print(f'Oracle Mean reward: {OR1_reward_mean}, Mean Inventory: {OR1_inventory_mean}, Mean Backlog: {OR1_backlog_mean}, Mean Customer Backlog: {OR1_customer_backlog_mean}')
print(f'Oracle std reward: {OR1_reward_std}, std Inventory: {OR1_inventory_std}, std Backlog: {OR1_backlog_std}, std Customer Backlog: {OR1_customer_backlog_std} \n')

print(f'SHLP Mean reward: {SHLP1_reward_mean}, Mean Inventory: {SHLP1_inventory_mean}, Mean Backlog: {SHLP1_backlog_mean}, Mean Customer Backlog: {SHLP1_customer_backlog_mean}')
print(f'SHLP std reward: {SHLP1_reward_std}, std Inventory: {SHLP1_inventory_std}, std Backlog: {SHLP1_backlog_std}, std Customer Backlog: {SHLP1_customer_backlog_std}')
print(f'SHLP Mean relative to Oracle: {SHLP1_reward_mean/OR1_reward_mean}\n')

print(f'DSHLP Mean reward: {DSHLP1_reward_mean}, Mean Inventory: {DSHLP1_inventory_mean}, Mean Backlog: {DSHLP1_backlog_mean}, Mean Customer Backlog: {DSHLP1_customer_backlog_mean}')
print(f'DSHLP std reward: {DSHLP1_reward_std}, std Inventory: {DSHLP1_inventory_std}, std Backlog: {DSHLP1_backlog_std}, std Customer Backlog: {DSHLP1_customer_backlog_std}')
print(f'DSHLP Mean relative to Oracle: {DSHLP1_reward_mean/ORDSHLP_reward_mean}\n')

print(f'Single Agent Mean reward: {S1_reward_mean}, Mean Inventory: {S1_inventory_mean}, Mean Backlog: {S1_backlog_mean}, Mean Customer Backlog: {S1_customer_backlog_mean}')
print(f'Single Agent std reward: {S1_reward_std}, std Inventory: {S1_inventory_std}, std Backlog: {S1_backlog_std}, std Customer Backlog: {S1_customer_backlog_std}')
print(f'Single Agent Mean relative to Oracle: {S1_reward_mean/OR1_reward_mean}\n')

print(f'MA Mean reward: {MA1_reward_mean}, Mean Inventory: {MA1_inventory_mean}, Mean Backlog: {MA1_backlog_mean}, Mean Customer Backlog: {MA1_customer_backlog_mean}')
print(f'MA std reward: {MA1_reward_std}, std Inventory: {MA1_inventory_std}, std Backlog: {MA1_backlog_std}, std Customer Backlog: {MA1_customer_backlog_std}')
print(f'MA Mean relative to Oracle: {MA1_reward_mean/OR1_reward_mean}\n')

print(f'MAS Mean reward: {MAS1_reward_mean}, Mean Inventory: {MAS1_inventory_mean}, Mean Backlog: {MAS1_backlog_mean}, Mean Customer Backlog: {MAS1_customer_backlog_mean}')
print(f'MAS std reward: {MAS1_reward_std}, std Inventory: {MAS1_inventory_std}, std Backlog: {MAS1_backlog_std}, std Customer Backlog: {MAS1_customer_backlog_std}')
print(f'MAS Mean relative to Oracle: {MAS1_reward_mean/OR1_reward_mean}\n')

print(f'MAI Mean reward: {MAI1_reward_mean}, Mean Inventory: {MAI1_inventory_mean}, Mean Backlog: {MAI1_backlog_mean}, Mean Customer Backlog: {MAI1_customer_backlog_mean}')
print(f'MAI std reward: {MAI1_reward_std}, std Inventory: {MAI1_inventory_std}, std Backlog: {MAI1_backlog_std}, std Customer Backlog: {MAI1_customer_backlog_std}')
print(f'MAI Mean relative to Oracle: {MAI1_reward_mean/OR1_reward_mean}\n')

print(f'MASI Mean reward: {MASI1_reward_mean}, Mean Inventory: {MASI1_inventory_mean}, Mean Backlog: {MASI1_backlog_mean}, Mean Customer Backlog: {MASI1_customer_backlog_mean}')
print(f'MASI std reward: {MASI1_reward_std}, std Inventory: {MASI1_inventory_std}, std Backlog: {MASI1_backlog_std}, std Customer Backlog: {MASI1_customer_backlog_std}')
print(f'MASI Mean relative to Oracle: {MASI1_reward_mean/OR1_reward_mean}\n')

print(f'CC Mean reward: {CC1_reward_mean}, Mean Inventory: {CC1_inventory_mean}, Mean Backlog: {CC1_backlog_mean}, Mean Customer Backlog: {CC1_customer_backlog_mean}')
print(f'CC std reward: {CC1_reward_std}, std Inventory: {CC1_inventory_std}, std Backlog: {CC1_backlog_std}, std Customer Backlog: {CC1_customer_backlog_std}')
print(f'CC Mean relative to Oracle: {CC1_reward_mean/OR1_reward_mean}\n')

print(f'CCI Mean reward: {CCI1_reward_mean}, Mean Inventory: {CCI1_inventory_mean}, Mean Backlog: {CCI1_backlog_mean}, Mean Customer Backlog: {CCI1_customer_backlog_mean}')
print(f'CCI std reward: {CCI1_reward_std}, std Inventory: {CCI1_inventory_std}, std Backlog: {CCI1_backlog_std}, std Customer Backlog: {CCI1_customer_backlog_std}')
print(f'CCI Mean relative to Oracle: {CCI1_reward_mean/OR1_reward_mean}\n')
