import numpy as np

def get_hyperparams(configuration):
    if configuration == "S_1":
        S_1 = {'env': 'InventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 1,
                'num_workers': 7,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'vf_clip_param': 2000,
                'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [64, 256]},
                'lambda': 1, #1.3837888378480092,
                'gamma': 0.99, #0.7487902836859563,
                'clip_param': 0.17246572030784435,
                'lr': 5e-06,
                'kl_coeff': 0.155105467569833,
                'kl_target': 0.009175476129234002,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 115,
                'num_sgd_iter': 10,
                'train_batch_size': 2625}
        return S_1

    if configuration == "S_2":
        S_2 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256]},
               'lambda': 0.9622872601323582,
               'gamma': 0.9554727686369138,
               'clip_param': 0.3021870049298385,
               'lr': 0.0001,
               'kl_coeff': 0.42534631775449383,
               'kl_target': 0.012268047562109669,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 74,
               'num_sgd_iter': 10,
               'train_batch_size': 7404}
        return S_2
    if configuration == "S_3":
        S_3 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 0,
               'num_workers': 0,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [64, 256]},
               'lambda': 0.95, #0.7334411013379447,
               'gamma': 0.99, #1.4059118261550305,
               'clip_param': 0.2176799297062092,
               'lr': 1e-5, #0.0005,
               'kl_coeff': 0.37,
               'kl_target': 0.0043,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 225,
               'num_sgd_iter': 10,#23,
               'train_batch_size': 3000} #2287}
        return S_3
    if configuration == "S_4":
        S_4 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256]},
               'lambda': 0.95, #0.9995423732773483,
               'gamma': 0.99, #0.9876552262659298,
               'clip_param': 0.17441217805192932, #0.3969217261821649,
               'lr': 1e-5, #0.0005,
               'kl_coeff': 0.2086693821092654,
               'kl_target': 0.006508469493194836,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 96,
               'num_sgd_iter': 16,
               'train_batch_size': 6627}
        return S_4
    if configuration == "S_5":
        S_5 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256]},
               'lambda': 0.95, #1.156166359993749,
               'gamma': 0.99, #1.1414186331686915,
               'clip_param': 0.17441217805192932,
               'lr': 1e-05,
               'kl_coeff': 0.34559999999999996,
               'kl_target': 0.006644645344691219,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 160,
               'num_sgd_iter': 27,
               'train_batch_size': 7110}
        return S_5
    if configuration == "S_6":
        S_6 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 0,
               'num_workers': 0,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256]},
               'lambda': 0.95,
               'gamma': 0.99,
               'clip_param': 0.2,
               'lr': 1e-05,
               'kl_coeff': 0.2,
               'kl_target': 0.01,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 128,
               'num_sgd_iter': 10,
               'train_batch_size': 3000}
        return S_6
    if configuration == "S_7":
        S_7 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': False,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [256, 128], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 256}},
               'lambda': 0.95,
               'gamma': 0.99,
               'clip_param': 0.2,
               'lr': 1e-05,
               'kl_coeff': 0.2,
               'kl_target': 0.01,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 128,
               'num_sgd_iter': 10,
               'train_batch_size': 3000}
        return S_7
    if configuration == "S_8":
        S_8 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': False,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [256, 256], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 256}},
               'lambda': 0.95, #1.14,
               'gamma': 0.99, #0.975735736239372,
               'clip_param': 0.15243085036384377,
               'lr': 5e-06,
               'kl_coeff': 0.42483543248805977,
               'kl_target': 0.012,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 100,
               'num_sgd_iter': 10,#3,
               'train_batch_size': 3000}#2400}
        return S_8
    if configuration == "S_9":
        S_9 = {'env': 'InventoryManagement',
               'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1},
               'batch_mode': 'complete_episodes',
               'normalize_actions': False,
               'framework': 'torch',
               'seed': 52,
               'use_critic': True,
               'use_gae': True,
               'num_gpus': 1,
               'num_workers': 7,
               'num_cpus_per_worker': 1,
               'shuffle_sequences': True,
               'vf_loss_coeff': 1,
               'grad_clip': None,
               'vf_clip_param': 2000,
               'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [64, 128], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
               'lambda': 0.95,
               'gamma': 0.99,
               'clip_param': 0.2,
               'lr': 1e-05,
               'kl_coeff': 0.2,
               'kl_target': 0.01,
               'entropy_coeff': 0,
               'sgd_minibatch_size': 128,
               'num_sgd_iter': 10,
               'train_batch_size': 3000}
        return S_9
    if configuration == "S_10":
        S_10 = {'env': 'InventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'vf_clip_param': 2000,
                'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return S_10
    if configuration == "S_11":
        S_11 = {'env': 'InventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 1,
                'num_workers': 7,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'vf_clip_param': 2000,
                'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [128, 256], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return S_11
    if configuration == "S_12":
        S_12 = {'env': 'InventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'vf_clip_param': 2000,
                'model': {'fcnet_activation': 'relu', 'fcnet_hiddens': [256, 128], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 256}},
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return S_12

    if configuration == "MA_1":
        MA_1 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 2,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'vf_clip_param': 2000,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [64, 256]},
                'lambda': 0.95, #0.9043852639846904,
                'gamma': 0.99, #1.3890281596279561,
                'clip_param': 0.375303413484271,
                'lr': 0.001,
                'kl_coeff': 0.254963985294243,
                'kl_target': 0.016538841499853452,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 60,
                'num_sgd_iter': 17,
                'train_batch_size': 6000}
        return MA_1
    if configuration == "MA_2":
        MA_2 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 1,
                'num_workers': 7,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128]},
                'vf_clip_param': 117,
                'lambda': 0.95, #0.7393602403181125,
                'gamma': 0.9612034396319433,
                'clip_param': 0.654891027941079,
                'lr': 5e-06,
                'kl_coeff': 0.15326301469235423,
                'kl_target': 0.016129323054552155,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 110,
                'num_sgd_iter': 14,
                'train_batch_size': 3795}
        return MA_2
    if configuration == "MA_3":
        MA_3 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 1,
                'num_workers': 7,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [256, 256]},
                'vf_clip_param': 936,
                'lambda': 0.9093970535329976,
                'gamma': 0.9448855436815132,
                'clip_param': 0.22725985462527712,
                'lr': 0.0005,
                'kl_coeff': 0.22488250209871735,
                'kl_target': 0.0065660697572046695,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 99,
                'num_sgd_iter': 17,
                'train_batch_size': 4228}
        return MA_3
    if configuration == "MA_4":
        MA_4 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [256, 256]},
                'vf_clip_param': 1440,
                'lambda': 0.95, #1.0959539780822676,
                'gamma': 0.99, #0.9622903754039889,
                'clip_param': 0.19200000000000003,
                'lr': 1e-05,
                'kl_coeff': 0.26142403440262707,
                'kl_target': 0.026923058447367015,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 183,
                'num_sgd_iter': 10,
                'train_batch_size': 3948}
        return MA_4
    if configuration == "MA_5":
        MA_5 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [256, 256]},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return MA_5
    if configuration == "MA_6":
        MA_6 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128]},
                'vf_clip_param': 1478,
                'lambda': 0.95, #0.7828566279659254,
                'gamma': 0.99,#1.1475372607792695,
                'clip_param': 0.20924745029798408,
                'lr': 1e-5, #0.001,
                'kl_coeff': 0.19,
                'kl_target': 0.006,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 180,
                'num_sgd_iter': 14,
                'train_batch_size': 3000}#2135}
        return MA_6
    if configuration == "MA_7":
        MA_7 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [64, 256], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 256}},
                'vf_clip_param': 1349,
                'lambda': 0.9838195154663965,
                'gamma': 0.9627521820570414,
                'clip_param': 0.24,
                'lr': 5e-05,
                'kl_coeff': 0.24,
                'kl_target': 0.018884647001748543,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 100,
                'num_sgd_iter': 27,
                'train_batch_size': 2400}
        return MA_7
    if configuration == "MA_8":
        MA_8 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 64], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return MA_8
    if configuration == "MA_9":
        MA_9 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [256, 64], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return MA_9
    if configuration == "MA_10":
        MA_10 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 256}},
                 'vf_clip_param': 281,
                 'lambda': 0.95,#0.76,
                 'gamma': 0.99, #0.9598684470434985,
                 'clip_param': 0.24592062304900586,
                 'lr': 5e-05,
                 'kl_coeff': 0.16000000000000003,
                 'kl_target': 0.029338390371967484,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 153,
                 'num_sgd_iter': 12,
                 'train_batch_size': 6000}#7904}
        return MA_10
    if configuration == "MA_11":
        MA_11 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 64], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                 'vf_clip_param': 1000,
                 'lambda': 0.95,
                 'gamma': 0.99,
                 'clip_param': 0.2,
                 'lr': 1e-05,
                 'kl_coeff': 0.2,
                 'kl_target': 0.01,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 128,
                 'num_sgd_iter': 10,
                 'train_batch_size': 3000}
        return MA_11
    if configuration == "MA_12":
        MA_12 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [256, 64], 'custom_model': 'rnn_model', 'max_seq_len': 30, 'custom_model_config': {'use_initial_fc': True, 'fc_size': 64, 'lstm_state_size': 128}},
                 'vf_clip_param': 1000,
                 'lambda': 0.95,
                 'gamma': 0.99,
                 'clip_param': 0.2,
                 'lr': 1e-05,
                 'kl_coeff': 0.2,
                 'kl_target': 0.01,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 128,
                 'num_sgd_iter': 10,
                 'train_batch_size': 3000}
        return MA_12

    if configuration == "CC_1":
        CC_1 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [256, 256], 'custom_model_config': {'state_size': 3}},
                'vf_clip_param': 1242,
                'lambda': 0.95, #0.7349540721256149,
                'gamma': 0.99,#0.7809868261815535,
                'clip_param': 0.10900302505434384,
                'lr': 1e-05,#5e-06,
                'kl_coeff': 0.13955455352328974,
                'kl_target': 0.016887526380556767,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 180,
                'num_sgd_iter': 9,
                'train_batch_size': 6000}#6433}
        return CC_1
    if configuration == "CC_2":
        CC_2 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [256, 256], 'custom_model_config': {'state_size': 6}},
                'vf_clip_param': 938,
                'lambda': 0.9127353518844037,
                'gamma': 0.9711514383605682,
                'clip_param': 0.5660355878369321,
                'lr': 5e-05,
                'kl_coeff': 0.334,
                'kl_target': 0.014,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 140,
                'num_sgd_iter': 18,
                'train_batch_size': 3000}
        return CC_2
    if configuration == "CC_3":
        CC_3 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [256, 256], 'custom_model_config': {'state_size': 5}},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return CC_3
    if configuration == "CC_4":
        CC_4 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': True,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [64, 256], 'custom_model_config': {'state_size': 4}},
                'vf_clip_param': 921,
                'lambda': 0.95,#0.9085827525459961,
                'gamma': 0.99, #0.9477924464974665,
                'clip_param': 0.5,
                'lr': 1e-05, #5e-06,
                'kl_coeff': 0.3754018694760135,
                'kl_target': 0.020736,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 206,
                'num_sgd_iter': 22,
                'train_batch_size': 3000}#2764}
        return CC_4
    if configuration == "CC_5":
        CC_5 = {'env': 'MultiAgentInventoryManagement',
                       'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                       'batch_mode': 'complete_episodes',
                       'normalize_actions': False,
                       'framework': 'torch',
                       'seed': 52,
                       'use_critic': True,
                       'use_gae': True,
                       'num_gpus': 0,
                       'num_workers': 0,
                       'num_cpus_per_worker': 1,
                       'shuffle_sequences': True,
                       'vf_loss_coeff': 1,
                       'grad_clip': None,
                       'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [256, 256], 'custom_model_config': {'state_size': 8}},
                       'vf_clip_param': 921,
                       'lambda': 0.9730123182327609,
                       'gamma': 0.9660712507345921,
                       'clip_param': 0.4147199999999999,
                       'lr': 5e-06,
                       'kl_coeff': 0.6915210595862405,
                       'kl_target': 0.003089822676636107,
                       'entropy_coeff': 0,
                       'sgd_minibatch_size': 92,
                       'num_sgd_iter': 12,
                       'train_batch_size': 4147}
        return CC_5
    if configuration == "CC_6":
        CC_6  = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': True,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'custom_model': 'cc_model', 'fcnet_hiddens': [128, 128], 'custom_model_config': {'state_size': 7}},
                 'vf_clip_param': 800,
                 'lambda': 0.9576605221693035,
                 'gamma': 0.9586007357269293,
                 'clip_param': 0.24,
                 'lr': 1e-05,
                 'kl_coeff': 0.16000000000000003,
                 'kl_target': 0.008,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 102,
                 'num_sgd_iter': 28,
                 'train_batch_size': 2383}
        return CC_6
    if configuration == "CC_7":
        CC_7 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3 , 0.4 , 0.2 ]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 64], 'custom_model_config': {'state_size': 3, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return CC_7
    if configuration == "CC_8":
        CC_8 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': False, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128], 'custom_model_config': {'state_size': 6, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return CC_8
    if configuration == "CC_9":
        CC_9 = {'env': 'MultiAgentInventoryManagement',
                'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                'batch_mode': 'complete_episodes',
                'normalize_actions': False,
                'framework': 'torch',
                'seed': 52,
                'use_critic': True,
                'use_gae': True,
                'num_gpus': 0,
                'num_workers': 0,
                'num_cpus_per_worker': 1,
                'shuffle_sequences': False,
                'vf_loss_coeff': 1,
                'grad_clip': None,
                'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128], 'custom_model_config': {'state_size': 5, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                'vf_clip_param': 1000,
                'lambda': 0.95,
                'gamma': 0.99,
                'clip_param': 0.2,
                'lr': 1e-05,
                'kl_coeff': 0.2,
                'kl_target': 0.01,
                'entropy_coeff': 0,
                'sgd_minibatch_size': 128,
                'num_sgd_iter': 10,
                'train_batch_size': 3000}
        return CC_9
    if configuration == "CC_10":
        CC_10 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': False, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128], 'custom_model_config': {'state_size': 4, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                 'vf_clip_param': 1000,
                 'lambda': 0.95,
                 'gamma': 0.99,
                 'clip_param': 0.2,
                 'lr': 1e-05,
                 'kl_coeff': 0.2,
                 'kl_target': 0.01,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 128,
                 'num_sgd_iter': 10,
                 'train_batch_size': 3000}
        return CC_10
    if configuration == "CC_11":
        CC_11 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': True, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 64], 'custom_model_config': {'state_size': 8, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                 'vf_clip_param': 1000,
                 'lambda': 0.95,
                 'gamma': 0.99,
                 'clip_param': 0.2,
                 'lr': 1e-05,
                 'kl_coeff': 0.2,
                 'kl_target': 0.01,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 128,
                 'num_sgd_iter': 10,
                 'train_batch_size': 3000}
        return CC_11
    if configuration == "CC_12":
        CC_12 = {'env': 'MultiAgentInventoryManagement',
                 'env_config': {'num_stages': 4, 'num_periods': 30, 'init_inv': np.array([10., 10., 10., 10.]), 'price': np.array([5, 4, 3, 2, 1]), 'stock_cost': np.array([0.35, 0.3, 0.4, 0.2]), 'backlog_cost': np.array([0.5, 0.7, 0.6, 0.9]), 'demand_dist': 'poisson', 'inv_target': np.array([0., 0., 0., 0.]), 'inv_max': np.array([30., 30., 30., 30.]), 'seed': 52, 'delay': np.array([1, 2, 3, 1], dtype=np.int8), 'mu': 5, 'standardise_state': True, 'standardise_actions': True, 'a': -1, 'b': 1, 'time_dependency': True, 'prev_demand': True, 'prev_actions': False, 'prev_length': 1, 'independent': False},
                 'batch_mode': 'complete_episodes',
                 'normalize_actions': False,
                 'framework': 'torch',
                 'seed': 52,
                 'use_critic': True,
                 'use_gae': True,
                 'num_gpus': 0,
                 'num_workers': 0,
                 'num_cpus_per_worker': 1,
                 'shuffle_sequences': False,
                 'vf_loss_coeff': 1,
                 'grad_clip': None,
                 'model': {'fcnet_activation': 'relu', 'vf_share_layers': False, 'fcnet_hiddens': [128, 128], 'custom_model_config': {'state_size': 7, 'use_initial_fc': True, 'fc_size': 64, 'fc_value_size': 64, 'lstm_state_size': 128}, 'custom_model': 'cc_rnn_model', 'max_seq_len': 30},
                 'vf_clip_param': 1000,
                 'lambda': 0.95,
                 'gamma': 0.99,
                 'clip_param': 0.2,
                 'lr': 1e-05,
                 'kl_coeff': 0.2,
                 'kl_target': 0.01,
                 'entropy_coeff': 0,
                 'sgd_minibatch_size': 128,
                 'num_sgd_iter': 10,
                 'train_batch_size': 3000}
        return CC_12
